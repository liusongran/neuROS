
neuROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f80  08005f80  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f88  08005f88  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004abc  20000010  08005fa0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004acc  08005fa0  00024acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127e0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fe  00000000  00000000  00032820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00035020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00035f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027dd  00000000  00000000  00036db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef52  00000000  00000000  00039595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1dde  00000000  00000000  000484e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0011a2c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee4  00000000  00000000  0011a314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f00 	.word	0x08005f00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08005f00 	.word	0x08005f00

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb8c 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81c 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f902 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f8d8 	bl	80006d8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000528:	f000 f8ac 	bl	8000684 <MX_USART3_UART_Init>
  MX_UART4_Init();
 800052c:	f000 f880 	bl	8000630 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 ff5e 	bl	80033f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <main+0x38>)
 8000536:	2100      	movs	r1, #0
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x3c>)
 800053a:	f002 ffa3 	bl	8003484 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x40>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f002 ff78 	bl	8003438 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x34>
 800054a:	bf00      	nop
 800054c:	08005f3c 	.word	0x08005f3c
 8000550:	080008c5 	.word	0x080008c5
 8000554:	20000174 	.word	0x20000174

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fcc2 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <SystemClock_Config+0xd0>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <SystemClock_Config+0xd4>)
 80005a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005cc:	23a8      	movs	r3, #168	; 0xa8
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fd1f 	bl	8002024 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005ec:	f000 f972 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2105      	movs	r1, #5
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f9be 	bl	8001990 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061a:	f000 f95b 	bl	80008d4 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_UART4_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_UART4_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_UART4_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_UART4_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_UART4_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_UART4_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_UART4_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_UART4_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_UART4_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_UART4_Init+0x4c>)
 8000668:	f001 ff7a 	bl	8002560 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f92f 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000002c 	.word	0x2000002c
 8000680:	40004c00 	.word	0x40004c00

08000684 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_USART3_UART_Init+0x50>)
 800068c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006bc:	f001 ff50 	bl	8002560 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006c6:	f000 f905 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000070 	.word	0x20000070
 80006d4:	40004800 	.word	0x40004800

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_DMA_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2105      	movs	r1, #5
 80006fe:	200c      	movs	r0, #12
 8000700:	f000 fbe5 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000704:	200c      	movs	r0, #12
 8000706:	f000 fbfe 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2105      	movs	r1, #5
 800070e:	200e      	movs	r0, #14
 8000710:	f000 fbdd 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000714:	200e      	movs	r0, #14
 8000716:	f000 fbf6 	bl	8000f06 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b5b      	ldr	r3, [pc, #364]	; (80008b0 <MX_GPIO_Init+0x188>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a5a      	ldr	r2, [pc, #360]	; (80008b0 <MX_GPIO_Init+0x188>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b58      	ldr	r3, [pc, #352]	; (80008b0 <MX_GPIO_Init+0x188>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b54      	ldr	r3, [pc, #336]	; (80008b0 <MX_GPIO_Init+0x188>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a53      	ldr	r2, [pc, #332]	; (80008b0 <MX_GPIO_Init+0x188>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b51      	ldr	r3, [pc, #324]	; (80008b0 <MX_GPIO_Init+0x188>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b4d      	ldr	r3, [pc, #308]	; (80008b0 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a4c      	ldr	r2, [pc, #304]	; (80008b0 <MX_GPIO_Init+0x188>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b4a      	ldr	r3, [pc, #296]	; (80008b0 <MX_GPIO_Init+0x188>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a45      	ldr	r2, [pc, #276]	; (80008b0 <MX_GPIO_Init+0x188>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b43      	ldr	r3, [pc, #268]	; (80008b0 <MX_GPIO_Init+0x188>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a3e      	ldr	r2, [pc, #248]	; (80008b0 <MX_GPIO_Init+0x188>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <MX_GPIO_Init+0x188>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <MX_GPIO_Init+0x188>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <MX_GPIO_Init+0x188>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007ec:	4831      	ldr	r0, [pc, #196]	; (80008b4 <MX_GPIO_Init+0x18c>)
 80007ee:	f001 f8b5 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4830      	ldr	r0, [pc, #192]	; (80008b8 <MX_GPIO_Init+0x190>)
 80007f8:	f001 f8b0 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000802:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	482a      	ldr	r0, [pc, #168]	; (80008bc <MX_GPIO_Init+0x194>)
 8000814:	f000 ff0e 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000818:	f244 0381 	movw	r3, #16513	; 0x4081
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4820      	ldr	r0, [pc, #128]	; (80008b4 <MX_GPIO_Init+0x18c>)
 8000832:	f000 feff 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	481a      	ldr	r0, [pc, #104]	; (80008b8 <MX_GPIO_Init+0x190>)
 800084e:	f000 fef1 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <MX_GPIO_Init+0x190>)
 8000866:	f000 fee5 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800086a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800087c:	230a      	movs	r3, #10
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_GPIO_Init+0x198>)
 8000888:	f000 fed4 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800088c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_GPIO_Init+0x198>)
 80008a2:	f000 fec7 	bl	8001634 <HAL_GPIO_Init>

}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	; 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40021800 	.word	0x40021800
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020000 	.word	0x40020000

080008c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f002 fe6b 	bl	80035a8 <osDelay>
 80008d2:	e7fb      	b.n	80008cc <StartDefaultTask+0x8>

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_MspInit+0x54>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <HAL_MspInit+0x54>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_MspInit+0x54>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_MspInit+0x54>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fad2 	bl	8000ece <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a6a      	ldr	r2, [pc, #424]	; (8000b00 <HAL_UART_MspInit+0x1c8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d134      	bne.n	80009c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	4b69      	ldr	r3, [pc, #420]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a68      	ldr	r2, [pc, #416]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 8000964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b66      	ldr	r3, [pc, #408]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b62      	ldr	r3, [pc, #392]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a61      	ldr	r2, [pc, #388]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b5f      	ldr	r3, [pc, #380]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000992:	2303      	movs	r3, #3
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009a2:	2308      	movs	r3, #8
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4856      	ldr	r0, [pc, #344]	; (8000b08 <HAL_UART_MspInit+0x1d0>)
 80009ae:	f000 fe41 	bl	8001634 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	2034      	movs	r0, #52	; 0x34
 80009b8:	f000 fa89 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009bc:	2034      	movs	r0, #52	; 0x34
 80009be:	f000 faa2 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009c2:	e098      	b.n	8000af6 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a50      	ldr	r2, [pc, #320]	; (8000b0c <HAL_UART_MspInit+0x1d4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	f040 8093 	bne.w	8000af6 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a4a      	ldr	r2, [pc, #296]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 80009da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a43      	ldr	r2, [pc, #268]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b41      	ldr	r3, [pc, #260]	; (8000b04 <HAL_UART_MspInit+0x1cc>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	483a      	ldr	r0, [pc, #232]	; (8000b10 <HAL_UART_MspInit+0x1d8>)
 8000a26:	f000 fe05 	bl	8001634 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a2c:	4a3a      	ldr	r2, [pc, #232]	; (8000b18 <HAL_UART_MspInit+0x1e0>)
 8000a2e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000a30:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a36:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a38:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3e:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a4c:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a52:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000a58:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a64:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000a6c:	4829      	ldr	r0, [pc, #164]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a6e:	f000 fa65 	bl	8000f3c <HAL_DMA_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_UART_MspInit+0x144>
      Error_Handler();
 8000a78:	f7ff ff2c 	bl	80008d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38
 8000a82:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <HAL_UART_MspInit+0x1dc>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000a8a:	4a25      	ldr	r2, [pc, #148]	; (8000b20 <HAL_UART_MspInit+0x1e8>)
 8000a8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000a90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a94:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000a98:	2240      	movs	r2, #64	; 0x40
 8000a9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000abe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ac2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000acc:	f000 fa36 	bl	8000f3c <HAL_DMA_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8000ad6:	f7ff fefd 	bl	80008d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0x1e4>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2027      	movs	r0, #39	; 0x27
 8000aec:	f000 f9ef 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000af0:	2027      	movs	r0, #39	; 0x27
 8000af2:	f000 fa08 	bl	8000f06 <HAL_NVIC_EnableIRQ>
}
 8000af6:	bf00      	nop
 8000af8:	3730      	adds	r7, #48	; 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004c00 	.word	0x40004c00
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40004800 	.word	0x40004800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	200000b4 	.word	0x200000b4
 8000b18:	40026028 	.word	0x40026028
 8000b1c:	20000114 	.word	0x20000114
 8000b20:	40026058 	.word	0x40026058

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f8c0 	bl	8000cd8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b58:	f004 f934 	bl	8004dc4 <xTaskGetSchedulerState>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d001      	beq.n	8000b66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b62:	f004 ff19 	bl	8005998 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <DMA1_Stream1_IRQHandler+0x10>)
 8000b72:	f000 fb23 	bl	80011bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000b4 	.word	0x200000b4

08000b80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <DMA1_Stream3_IRQHandler+0x10>)
 8000b86:	f000 fb19 	bl	80011bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000114 	.word	0x20000114

08000b94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USART3_IRQHandler+0x10>)
 8000b9a:	f001 fd2f 	bl	80025fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000070 	.word	0x20000070

08000ba8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <UART4_IRQHandler+0x10>)
 8000bae:	f001 fd25 	bl	80025fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000002c 	.word	0x2000002c

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	; (8000c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ffd7 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f005 f93d 	bl	8005e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fc7f 	bl	8000514 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c24:	08005f90 	.word	0x08005f90
  ldr r2, =_sbss
 8000c28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c2c:	20004acc 	.word	0x20004acc

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f92b 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	200f      	movs	r0, #15
 8000c64:	f000 f808 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff fe3a 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x54>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x58>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f943 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb4:	f000 f90b 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x5c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000178 	.word	0x20000178

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000178 	.word	0x20000178

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff3e 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff8e 	bl	8000e0c <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff31 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff feda 	bl	8000d00 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e099      	b.n	800108c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f78:	e00f      	b.n	8000f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f7a:	f7ff fec1 	bl	8000d00 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d908      	bls.n	8000f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2203      	movs	r2, #3
 8000f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e078      	b.n	800108c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e8      	bne.n	8000f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <HAL_DMA_Init+0x158>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d107      	bne.n	8001004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4313      	orrs	r3, r2
 8001002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f023 0307 	bic.w	r3, r3, #7
 800101a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	4313      	orrs	r3, r2
 8001024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	2b04      	cmp	r3, #4
 800102c:	d117      	bne.n	800105e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4313      	orrs	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00e      	beq.n	800105e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fa7b 	bl	800153c <DMA_CheckFifoParam>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d008      	beq.n	800105e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2240      	movs	r2, #64	; 0x40
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800105a:	2301      	movs	r3, #1
 800105c:	e016      	b.n	800108c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fa32 	bl	80014d0 <DMA_CalcBaseAndBitshift>
 800106c:	4603      	mov	r3, r0
 800106e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001074:	223f      	movs	r2, #63	; 0x3f
 8001076:	409a      	lsls	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	f010803f 	.word	0xf010803f

08001098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010a6:	f7ff fe2b 	bl	8000d00 <HAL_GetTick>
 80010aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d008      	beq.n	80010ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e052      	b.n	8001170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0216 	bic.w	r2, r2, #22
 80010d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <HAL_DMA_Abort+0x62>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0208 	bic.w	r2, r2, #8
 8001108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800111a:	e013      	b.n	8001144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111c:	f7ff fdf0 	bl	8000d00 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b05      	cmp	r3, #5
 8001128:	d90c      	bls.n	8001144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2220      	movs	r2, #32
 800112e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e015      	b.n	8001170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1e4      	bne.n	800111c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001156:	223f      	movs	r2, #63	; 0x3f
 8001158:	409a      	lsls	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d004      	beq.n	8001196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00c      	b.n	80011b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2205      	movs	r2, #5
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011c8:	4b8e      	ldr	r3, [pc, #568]	; (8001404 <HAL_DMA_IRQHandler+0x248>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a8e      	ldr	r2, [pc, #568]	; (8001408 <HAL_DMA_IRQHandler+0x24c>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0a9b      	lsrs	r3, r3, #10
 80011d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e6:	2208      	movs	r2, #8
 80011e8:	409a      	lsls	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d01a      	beq.n	8001228 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0204 	bic.w	r2, r2, #4
 800120e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2208      	movs	r2, #8
 8001216:	409a      	lsls	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	2201      	movs	r2, #1
 800122e:	409a      	lsls	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d012      	beq.n	800125e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124a:	2201      	movs	r2, #1
 800124c:	409a      	lsls	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001262:	2204      	movs	r2, #4
 8001264:	409a      	lsls	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d012      	beq.n	8001294 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00b      	beq.n	8001294 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2204      	movs	r2, #4
 8001282:	409a      	lsls	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128c:	f043 0204 	orr.w	r2, r3, #4
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001298:	2210      	movs	r2, #16
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d043      	beq.n	800132c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d03c      	beq.n	800132c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b6:	2210      	movs	r2, #16
 80012b8:	409a      	lsls	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d018      	beq.n	80012fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d108      	bne.n	80012ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d024      	beq.n	800132c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	4798      	blx	r3
 80012ea:	e01f      	b.n	800132c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01b      	beq.n	800132c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
 80012fc:	e016      	b.n	800132c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d107      	bne.n	800131c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0208 	bic.w	r2, r2, #8
 800131a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2220      	movs	r2, #32
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 808f 	beq.w	800145c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8087 	beq.w	800145c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001352:	2220      	movs	r2, #32
 8001354:	409a      	lsls	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b05      	cmp	r3, #5
 8001364:	d136      	bne.n	80013d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0216 	bic.w	r2, r2, #22
 8001374:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001384:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	2b00      	cmp	r3, #0
 800138c:	d103      	bne.n	8001396 <HAL_DMA_IRQHandler+0x1da>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0208 	bic.w	r2, r2, #8
 80013a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013aa:	223f      	movs	r2, #63	; 0x3f
 80013ac:	409a      	lsls	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d07e      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	4798      	blx	r3
        }
        return;
 80013d2:	e079      	b.n	80014c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01d      	beq.n	800141e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10d      	bne.n	800140c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d031      	beq.n	800145c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
 8001400:	e02c      	b.n	800145c <HAL_DMA_IRQHandler+0x2a0>
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000
 8001408:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001410:	2b00      	cmp	r3, #0
 8001412:	d023      	beq.n	800145c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	4798      	blx	r3
 800141c:	e01e      	b.n	800145c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10f      	bne.n	800144c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0210 	bic.w	r2, r2, #16
 800143a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	2b00      	cmp	r3, #0
 8001462:	d032      	beq.n	80014ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d022      	beq.n	80014b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2205      	movs	r2, #5
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3301      	adds	r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	429a      	cmp	r2, r3
 8001492:	d307      	bcc.n	80014a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f2      	bne.n	8001488 <HAL_DMA_IRQHandler+0x2cc>
 80014a2:	e000      	b.n	80014a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	4798      	blx	r3
 80014c6:	e000      	b.n	80014ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80014c8:	bf00      	nop
    }
  }
}
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3b10      	subs	r3, #16
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <DMA_CalcBaseAndBitshift+0x64>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <DMA_CalcBaseAndBitshift+0x68>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d909      	bls.n	8001512 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	1d1a      	adds	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	659a      	str	r2, [r3, #88]	; 0x58
 8001510:	e007      	b.n	8001522 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	aaaaaaab 	.word	0xaaaaaaab
 8001538:	08005f78 	.word	0x08005f78

0800153c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d11f      	bne.n	8001596 <DMA_CheckFifoParam+0x5a>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d856      	bhi.n	800160a <DMA_CheckFifoParam+0xce>
 800155c:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <DMA_CheckFifoParam+0x28>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	08001575 	.word	0x08001575
 8001568:	08001587 	.word	0x08001587
 800156c:	08001575 	.word	0x08001575
 8001570:	0800160b 	.word	0x0800160b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d046      	beq.n	800160e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001584:	e043      	b.n	800160e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800158e:	d140      	bne.n	8001612 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001594:	e03d      	b.n	8001612 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800159e:	d121      	bne.n	80015e4 <DMA_CheckFifoParam+0xa8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d837      	bhi.n	8001616 <DMA_CheckFifoParam+0xda>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <DMA_CheckFifoParam+0x70>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080015bd 	.word	0x080015bd
 80015b0:	080015c3 	.word	0x080015c3
 80015b4:	080015bd 	.word	0x080015bd
 80015b8:	080015d5 	.word	0x080015d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
      break;
 80015c0:	e030      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d025      	beq.n	800161a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d2:	e022      	b.n	800161a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015dc:	d11f      	bne.n	800161e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015e2:	e01c      	b.n	800161e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d903      	bls.n	80015f2 <DMA_CheckFifoParam+0xb6>
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d003      	beq.n	80015f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015f0:	e018      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
      break;
 80015f6:	e015      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00e      	beq.n	8001622 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
      break;
 8001608:	e00b      	b.n	8001622 <DMA_CheckFifoParam+0xe6>
      break;
 800160a:	bf00      	nop
 800160c:	e00a      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 800160e:	bf00      	nop
 8001610:	e008      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 8001612:	bf00      	nop
 8001614:	e006      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 8001616:	bf00      	nop
 8001618:	e004      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 800161a:	bf00      	nop
 800161c:	e002      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;   
 800161e:	bf00      	nop
 8001620:	e000      	b.n	8001624 <DMA_CheckFifoParam+0xe8>
      break;
 8001622:	bf00      	nop
    }
  } 
  
  return status; 
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e165      	b.n	800191c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8154 	bne.w	8001916 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d005      	beq.n	8001686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	2b02      	cmp	r3, #2
 8001684:	d130      	bne.n	80016e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d017      	beq.n	8001724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80ae 	beq.w	8001916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <HAL_GPIO_Init+0x300>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a5c      	ldr	r2, [pc, #368]	; (8001934 <HAL_GPIO_Init+0x300>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <HAL_GPIO_Init+0x300>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_GPIO_Init+0x304>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4f      	ldr	r2, [pc, #316]	; (800193c <HAL_GPIO_Init+0x308>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x21a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4e      	ldr	r2, [pc, #312]	; (8001940 <HAL_GPIO_Init+0x30c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x216>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_GPIO_Init+0x310>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x212>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_GPIO_Init+0x314>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x20e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4b      	ldr	r2, [pc, #300]	; (800194c <HAL_GPIO_Init+0x318>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x20a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <HAL_GPIO_Init+0x31c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x206>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a49      	ldr	r2, [pc, #292]	; (8001954 <HAL_GPIO_Init+0x320>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x202>
 8001832:	2306      	movs	r3, #6
 8001834:	e00c      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 8001836:	2307      	movs	r3, #7
 8001838:	e00a      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 800183a:	2305      	movs	r3, #5
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 800183e:	2304      	movs	r3, #4
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x21c>
 800184e:	2300      	movs	r3, #0
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001860:	4935      	ldr	r1, [pc, #212]	; (8001938 <HAL_GPIO_Init+0x304>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_GPIO_Init+0x324>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001892:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_GPIO_Init+0x324>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x324>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018bc:	4a26      	ldr	r2, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x324>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_GPIO_Init+0x324>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_GPIO_Init+0x324>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_GPIO_Init+0x324>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_GPIO_Init+0x324>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	f67f ae96 	bls.w	8001650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40013800 	.word	0x40013800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400
 8001944:	40020800 	.word	0x40020800
 8001948:	40020c00 	.word	0x40020c00
 800194c:	40021000 	.word	0x40021000
 8001950:	40021400 	.word	0x40021400
 8001954:	40021800 	.word	0x40021800
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001978:	e003      	b.n	8001982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0cc      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d90c      	bls.n	80019cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0b8      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	494d      	ldr	r1, [pc, #308]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d044      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e067      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4934      	ldr	r1, [pc, #208]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f93e 	bl	8000d00 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f93a 	bl	8000d00 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e04f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d20c      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e032      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4916      	ldr	r1, [pc, #88]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490e      	ldr	r1, [pc, #56]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b16:	f000 f855 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	490a      	ldr	r1, [pc, #40]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f89e 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08005f60 	.word	0x08005f60
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000

08001b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08005f70 	.word	0x08005f70

08001b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ba0:	f7ff ffdc 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0b5b      	lsrs	r3, r3, #13
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08005f70 	.word	0x08005f70

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc8:	b0ae      	sub	sp, #184	; 0xb8
 8001bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bea:	4bcb      	ldr	r3, [pc, #812]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	f200 8206 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x440>
 8001bf8:	a201      	add	r2, pc, #4	; (adr r2, 8001c00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfe:	bf00      	nop
 8001c00:	08001c35 	.word	0x08001c35
 8001c04:	08002005 	.word	0x08002005
 8001c08:	08002005 	.word	0x08002005
 8001c0c:	08002005 	.word	0x08002005
 8001c10:	08001c3d 	.word	0x08001c3d
 8001c14:	08002005 	.word	0x08002005
 8001c18:	08002005 	.word	0x08002005
 8001c1c:	08002005 	.word	0x08002005
 8001c20:	08001c45 	.word	0x08001c45
 8001c24:	08002005 	.word	0x08002005
 8001c28:	08002005 	.word	0x08002005
 8001c2c:	08002005 	.word	0x08002005
 8001c30:	08001e35 	.word	0x08001e35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c34:	4bb9      	ldr	r3, [pc, #740]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001c3a:	e1e7      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c3c:	4bb8      	ldr	r3, [pc, #736]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c42:	e1e3      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c44:	4bb4      	ldr	r3, [pc, #720]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c50:	4bb1      	ldr	r3, [pc, #708]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d071      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5c:	4bae      	ldr	r3, [pc, #696]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	099b      	lsrs	r3, r3, #6
 8001c62:	2200      	movs	r2, #0
 8001c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c82:	4622      	mov	r2, r4
 8001c84:	462b      	mov	r3, r5
 8001c86:	f04f 0000 	mov.w	r0, #0
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	0159      	lsls	r1, r3, #5
 8001c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c94:	0150      	lsls	r0, r2, #5
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	1a51      	subs	r1, r2, r1
 8001c9e:	6439      	str	r1, [r7, #64]	; 0x40
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	018b      	lsls	r3, r1, #6
 8001cb8:	4641      	mov	r1, r8
 8001cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cbe:	4641      	mov	r1, r8
 8001cc0:	018a      	lsls	r2, r1, #6
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	1a51      	subs	r1, r2, r1
 8001cc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cc8:	4649      	mov	r1, r9
 8001cca:	eb63 0301 	sbc.w	r3, r3, r1
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001cdc:	4649      	mov	r1, r9
 8001cde:	00cb      	lsls	r3, r1, #3
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ce6:	4641      	mov	r1, r8
 8001ce8:	00ca      	lsls	r2, r1, #3
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4622      	mov	r2, r4
 8001cf2:	189b      	adds	r3, r3, r2
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf6:	462b      	mov	r3, r5
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	eb42 0303 	adc.w	r3, r2, r3
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	024b      	lsls	r3, r1, #9
 8001d10:	4621      	mov	r1, r4
 8001d12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d16:	4621      	mov	r1, r4
 8001d18:	024a      	lsls	r2, r1, #9
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d22:	2200      	movs	r2, #0
 8001d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d30:	f7fe fa6e 	bl	8000210 <__aeabi_uldivmod>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4613      	mov	r3, r2
 8001d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d3e:	e067      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	2200      	movs	r2, #0
 8001d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001d62:	4622      	mov	r2, r4
 8001d64:	462b      	mov	r3, r5
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	0159      	lsls	r1, r3, #5
 8001d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d74:	0150      	lsls	r0, r2, #5
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	1a51      	subs	r1, r2, r1
 8001d7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d80:	4629      	mov	r1, r5
 8001d82:	eb63 0301 	sbc.w	r3, r3, r1
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001d94:	4649      	mov	r1, r9
 8001d96:	018b      	lsls	r3, r1, #6
 8001d98:	4641      	mov	r1, r8
 8001d9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d9e:	4641      	mov	r1, r8
 8001da0:	018a      	lsls	r2, r1, #6
 8001da2:	4641      	mov	r1, r8
 8001da4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001da8:	4649      	mov	r1, r9
 8001daa:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001dba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dc2:	4692      	mov	sl, r2
 8001dc4:	469b      	mov	fp, r3
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	eb1a 0303 	adds.w	r3, sl, r3
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	462b      	mov	r3, r5
 8001dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001de2:	4629      	mov	r1, r5
 8001de4:	028b      	lsls	r3, r1, #10
 8001de6:	4621      	mov	r1, r4
 8001de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dec:	4621      	mov	r1, r4
 8001dee:	028a      	lsls	r2, r1, #10
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df8:	2200      	movs	r2, #0
 8001dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8001dfc:	677a      	str	r2, [r7, #116]	; 0x74
 8001dfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e02:	f7fe fa05 	bl	8000210 <__aeabi_uldivmod>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e10:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e32:	e0eb      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e34:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e40:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d06b      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4c:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	2200      	movs	r2, #0
 8001e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e60:	2300      	movs	r3, #0
 8001e62:	667b      	str	r3, [r7, #100]	; 0x64
 8001e64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e68:	4622      	mov	r2, r4
 8001e6a:	462b      	mov	r3, r5
 8001e6c:	f04f 0000 	mov.w	r0, #0
 8001e70:	f04f 0100 	mov.w	r1, #0
 8001e74:	0159      	lsls	r1, r3, #5
 8001e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e7a:	0150      	lsls	r0, r2, #5
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4621      	mov	r1, r4
 8001e82:	1a51      	subs	r1, r2, r1
 8001e84:	61b9      	str	r1, [r7, #24]
 8001e86:	4629      	mov	r1, r5
 8001e88:	eb63 0301 	sbc.w	r3, r3, r1
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e9a:	4659      	mov	r1, fp
 8001e9c:	018b      	lsls	r3, r1, #6
 8001e9e:	4651      	mov	r1, sl
 8001ea0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ea4:	4651      	mov	r1, sl
 8001ea6:	018a      	lsls	r2, r1, #6
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	ebb2 0801 	subs.w	r8, r2, r1
 8001eae:	4659      	mov	r1, fp
 8001eb0:	eb63 0901 	sbc.w	r9, r3, r1
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ec0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ec4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ec8:	4690      	mov	r8, r2
 8001eca:	4699      	mov	r9, r3
 8001ecc:	4623      	mov	r3, r4
 8001ece:	eb18 0303 	adds.w	r3, r8, r3
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	462b      	mov	r3, r5
 8001ed6:	eb49 0303 	adc.w	r3, r9, r3
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ee8:	4629      	mov	r1, r5
 8001eea:	024b      	lsls	r3, r1, #9
 8001eec:	4621      	mov	r1, r4
 8001eee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	024a      	lsls	r2, r1, #9
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001efe:	2200      	movs	r2, #0
 8001f00:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f08:	f7fe f982 	bl	8000210 <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4613      	mov	r3, r2
 8001f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f16:	e065      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x420>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	00f42400 	.word	0x00f42400
 8001f20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_GetSysClockFreq+0x458>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4611      	mov	r1, r2
 8001f30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f34:	653b      	str	r3, [r7, #80]	; 0x50
 8001f36:	2300      	movs	r3, #0
 8001f38:	657b      	str	r3, [r7, #84]	; 0x54
 8001f3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001f3e:	4642      	mov	r2, r8
 8001f40:	464b      	mov	r3, r9
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f50:	0150      	lsls	r0, r2, #5
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4641      	mov	r1, r8
 8001f58:	1a51      	subs	r1, r2, r1
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f70:	4659      	mov	r1, fp
 8001f72:	018b      	lsls	r3, r1, #6
 8001f74:	4651      	mov	r1, sl
 8001f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	018a      	lsls	r2, r1, #6
 8001f7e:	4651      	mov	r1, sl
 8001f80:	1a54      	subs	r4, r2, r1
 8001f82:	4659      	mov	r1, fp
 8001f84:	eb63 0501 	sbc.w	r5, r3, r1
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	00eb      	lsls	r3, r5, #3
 8001f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f96:	00e2      	lsls	r2, r4, #3
 8001f98:	4614      	mov	r4, r2
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	18e3      	adds	r3, r4, r3
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	eb45 0303 	adc.w	r3, r5, r3
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	028b      	lsls	r3, r1, #10
 8001fba:	4621      	mov	r1, r4
 8001fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	028a      	lsls	r2, r1, #10
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fcc:	2200      	movs	r2, #0
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001fd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fd6:	f7fe f91b 	bl	8000210 <__aeabi_uldivmod>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4613      	mov	r3, r2
 8001fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_GetSysClockFreq+0x458>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	0f1b      	lsrs	r3, r3, #28
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ff2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002002:	e003      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800200a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002010:	4618      	mov	r0, r3
 8002012:	37b8      	adds	r7, #184	; 0xb8
 8002014:	46bd      	mov	sp, r7
 8002016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	00f42400 	.word	0x00f42400

08002024 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e28d      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8083 	beq.w	800214a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002044:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b04      	cmp	r3, #4
 800204e:	d019      	beq.n	8002084 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002058:	2b08      	cmp	r3, #8
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800205c:	4b8e      	ldr	r3, [pc, #568]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002068:	d00c      	beq.n	8002084 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206a:	4b8b      	ldr	r3, [pc, #556]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d112      	bne.n	800209c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002082:	d10b      	bne.n	800209c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d05b      	beq.n	8002148 <HAL_RCC_OscConfig+0x124>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d157      	bne.n	8002148 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e25a      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d106      	bne.n	80020b4 <HAL_RCC_OscConfig+0x90>
 80020a6:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7b      	ldr	r2, [pc, #492]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e01d      	b.n	80020f0 <HAL_RCC_OscConfig+0xcc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0xb4>
 80020be:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a75      	ldr	r2, [pc, #468]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a72      	ldr	r2, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0xcc>
 80020d8:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6b      	ldr	r2, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe02 	bl	8000d00 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe fdfe 	bl	8000d00 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e21f      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b61      	ldr	r3, [pc, #388]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0xdc>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe fdee 	bl	8000d00 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7fe fdea 	bl	8000d00 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e20b      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	4b57      	ldr	r3, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x104>
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06f      	beq.n	8002236 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b00      	cmp	r3, #0
 8002160:	d017      	beq.n	8002192 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002162:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800216a:	2b08      	cmp	r3, #8
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800216e:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d11c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d116      	bne.n	80021c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_RCC_OscConfig+0x186>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e1d3      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4937      	ldr	r1, [pc, #220]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	e03a      	b.n	8002236 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c8:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_RCC_OscConfig+0x278>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe fd97 	bl	8000d00 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d6:	f7fe fd93 	bl	8000d00 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e1b4      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4925      	ldr	r1, [pc, #148]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
 8002208:	e015      	b.n	8002236 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_OscConfig+0x278>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe fd76 	bl	8000d00 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002218:	f7fe fd72 	bl	8000d00 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e193      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d036      	beq.n	80022b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7fe fd56 	bl	8000d00 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002258:	f7fe fd52 	bl	8000d00 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e173      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x234>
 8002276:	e01b      	b.n	80022b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe fd3f 	bl	8000d00 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	e00e      	b.n	80022a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002286:	f7fe fd3b 	bl	8000d00 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d907      	bls.n	80022a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e15c      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
 8002298:	40023800 	.word	0x40023800
 800229c:	42470000 	.word	0x42470000
 80022a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b8a      	ldr	r3, [pc, #552]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ea      	bne.n	8002286 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8097 	beq.w	80023ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b83      	ldr	r3, [pc, #524]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a7e      	ldr	r2, [pc, #504]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b7c      	ldr	r3, [pc, #496]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <HAL_RCC_OscConfig+0x4b0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x4b0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a75      	ldr	r2, [pc, #468]	; (80024d4 <HAL_RCC_OscConfig+0x4b0>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7fe fcfb 	bl	8000d00 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe fcf7 	bl	8000d00 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e118      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <HAL_RCC_OscConfig+0x4b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x31e>
 8002334:	4b66      	ldr	r3, [pc, #408]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a65      	ldr	r2, [pc, #404]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x358>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x340>
 800234a:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a60      	ldr	r2, [pc, #384]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a5d      	ldr	r2, [pc, #372]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x358>
 8002364:	4b5a      	ldr	r3, [pc, #360]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a59      	ldr	r2, [pc, #356]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	4b57      	ldr	r3, [pc, #348]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002376:	f023 0304 	bic.w	r3, r3, #4
 800237a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fcbc 	bl	8000d00 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe fcb8 	bl	8000d00 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0d7      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0ee      	beq.n	800238c <HAL_RCC_OscConfig+0x368>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe fca6 	bl	8000d00 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe fca2 	bl	8000d00 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0c1      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ce:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ee      	bne.n	80023b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80ad 	beq.w	8002550 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d060      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d145      	bne.n	8002496 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <HAL_RCC_OscConfig+0x4b4>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fc76 	bl	8000d00 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fc72 	bl	8000d00 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e093      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	3b01      	subs	r3, #1
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	061b      	lsls	r3, r3, #24
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	071b      	lsls	r3, r3, #28
 8002462:	491b      	ldr	r1, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_OscConfig+0x4b4>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7fe fc47 	bl	8000d00 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe fc43 	bl	8000d00 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e064      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x452>
 8002494:	e05c      	b.n	8002550 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_RCC_OscConfig+0x4b4>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fc30 	bl	8000d00 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fc2c 	bl	8000d00 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e04d      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x480>
 80024c2:	e045      	b.n	8002550 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e040      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40007000 	.word	0x40007000
 80024d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_RCC_OscConfig+0x538>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d030      	beq.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d129      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d122      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002514:	4293      	cmp	r3, r2
 8002516:	d119      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	085b      	lsrs	r3, r3, #1
 8002524:	3b01      	subs	r3, #1
 8002526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d10f      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e03f      	b.n	80025f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe f9d6 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	; 0x24
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fc7b 	bl	8002ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0ba      	sub	sp, #232	; 0xe8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800263a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_UART_IRQHandler+0x66>
 800264e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fb65 	bl	8002d2a <UART_Receive_IT>
      return;
 8002660:	e256      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80de 	beq.w	8002828 <HAL_UART_IRQHandler+0x22c>
 800266c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800267c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80d1 	beq.w	8002828 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_UART_IRQHandler+0xae>
 8002692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <HAL_UART_IRQHandler+0xd2>
 80026b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0202 	orr.w	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_UART_IRQHandler+0xf6>
 80026da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f043 0204 	orr.w	r2, r3, #4
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d011      	beq.n	8002722 <HAL_UART_IRQHandler+0x126>
 80026fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800270a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f043 0208 	orr.w	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 81ed 	beq.w	8002b06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800272c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_UART_IRQHandler+0x14e>
 8002738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 faf0 	bl	8002d2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <HAL_UART_IRQHandler+0x17a>
 800276e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d04f      	beq.n	8002816 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f9f8 	bl	8002b6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	d141      	bne.n	800280e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3314      	adds	r3, #20
 8002790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002798:	e853 3f00 	ldrex	r3, [r3]
 800279c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1d9      	bne.n	800278a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d013      	beq.n	8002806 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	4a7d      	ldr	r2, [pc, #500]	; (80029d8 <HAL_UART_IRQHandler+0x3dc>)
 80027e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fcc4 	bl	8001178 <HAL_DMA_Abort_IT>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002800:	4610      	mov	r0, r2
 8002802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	e00e      	b.n	8002824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f99a 	bl	8002b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280c:	e00a      	b.n	8002824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f996 	bl	8002b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	e006      	b.n	8002824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f992 	bl	8002b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002822:	e170      	b.n	8002b06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	bf00      	nop
    return;
 8002826:	e16e      	b.n	8002b06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	2b01      	cmp	r3, #1
 800282e:	f040 814a 	bne.w	8002ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8143 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 813c 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	f040 80b4 	bne.w	80029dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8140 	beq.w	8002b0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800288e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002892:	429a      	cmp	r2, r3
 8002894:	f080 8139 	bcs.w	8002b0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800289e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028aa:	f000 8088 	beq.w	80029be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	330c      	adds	r3, #12
 80028b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1d9      	bne.n	80028ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3314      	adds	r3, #20
 8002900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800290a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3314      	adds	r3, #20
 800291a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800291e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002922:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e1      	bne.n	80028fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3314      	adds	r3, #20
 800293c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800294c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800295a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800295c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002960:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e3      	bne.n	8002936 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	330c      	adds	r3, #12
 8002982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298e:	f023 0310 	bic.w	r3, r3, #16
 8002992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80029a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029a8:	e841 2300 	strex	r3, r2, [r1]
 80029ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e3      	bne.n	800297c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fb6d 	bl	8001098 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	4619      	mov	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8c0 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029d4:	e099      	b.n	8002b0a <HAL_UART_IRQHandler+0x50e>
 80029d6:	bf00      	nop
 80029d8:	08002c33 	.word	0x08002c33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 808b 	beq.w	8002b0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8086 	beq.w	8002b0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a26:	647a      	str	r2, [r7, #68]	; 0x44
 8002a28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e3      	bne.n	8002a02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3314      	adds	r3, #20
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	623b      	str	r3, [r7, #32]
   return(result);
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3314      	adds	r3, #20
 8002a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e3      	bne.n	8002a3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0310 	bic.w	r3, r3, #16
 8002a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002aa4:	61fa      	str	r2, [r7, #28]
 8002aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa8:	69b9      	ldr	r1, [r7, #24]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	e841 2300 	strex	r3, r2, [r1]
 8002ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e3      	bne.n	8002a80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f848 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ac4:	e023      	b.n	8002b0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x4ea>
 8002ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8bb 	bl	8002c5a <UART_Transmit_IT>
    return;
 8002ae4:	e014      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <HAL_UART_IRQHandler+0x514>
 8002af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8fb 	bl	8002cfa <UART_EndTransmit_IT>
    return;
 8002b04:	e004      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
    return;
 8002b06:	bf00      	nop
 8002b08:	e002      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
      return;
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
      return;
 8002b0e:	bf00      	nop
  }
}
 8002b10:	37e8      	adds	r7, #232	; 0xe8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop

08002b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b095      	sub	sp, #84	; 0x54
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	330c      	adds	r3, #12
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b94:	643a      	str	r2, [r7, #64]	; 0x40
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e5      	bne.n	8002b74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3314      	adds	r3, #20
 8002bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3314      	adds	r3, #20
 8002bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e5      	bne.n	8002ba8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d119      	bne.n	8002c18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f023 0310 	bic.w	r3, r3, #16
 8002bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c04:	61ba      	str	r2, [r7, #24]
 8002c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	6979      	ldr	r1, [r7, #20]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	613b      	str	r3, [r7, #16]
   return(result);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e5      	bne.n	8002be4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c26:	bf00      	nop
 8002c28:	3754      	adds	r7, #84	; 0x54
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f7ff ff77 	bl	8002b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b21      	cmp	r3, #33	; 0x21
 8002c6c:	d13e      	bne.n	8002cec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c76:	d114      	bne.n	8002ca2 <UART_Transmit_IT+0x48>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d110      	bne.n	8002ca2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	1c9a      	adds	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	621a      	str	r2, [r3, #32]
 8002ca0:	e008      	b.n	8002cb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	1c59      	adds	r1, r3, #1
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6211      	str	r1, [r2, #32]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10f      	bne.n	8002ce8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fefc 	bl	8002b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b08c      	sub	sp, #48	; 0x30
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b22      	cmp	r3, #34	; 0x22
 8002d3c:	f040 80ab 	bne.w	8002e96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d117      	bne.n	8002d7a <UART_Receive_IT+0x50>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d113      	bne.n	8002d7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	1c9a      	adds	r2, r3, #2
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
 8002d78:	e026      	b.n	8002dc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8c:	d007      	beq.n	8002d9e <UART_Receive_IT+0x74>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <UART_Receive_IT+0x82>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e008      	b.n	8002dbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d15a      	bne.n	8002e92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0220 	bic.w	r2, r2, #32
 8002dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d135      	bne.n	8002e88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
 8002e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	613b      	str	r3, [r7, #16]
   return(result);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f023 0310 	bic.w	r3, r3, #16
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	623a      	str	r2, [r7, #32]
 8002e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	69f9      	ldr	r1, [r7, #28]
 8002e48:	6a3a      	ldr	r2, [r7, #32]
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e5      	bne.n	8002e22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d10a      	bne.n	8002e7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff fe67 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
 8002e86:	e002      	b.n	8002e8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff fe4f 	bl	8002b2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e002      	b.n	8002e98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3730      	adds	r7, #48	; 0x30
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b0c0      	sub	sp, #256	; 0x100
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	68d9      	ldr	r1, [r3, #12]
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	ea40 0301 	orr.w	r3, r0, r1
 8002ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ef8:	f021 010c 	bic.w	r1, r1, #12
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f06:	430b      	orrs	r3, r1
 8002f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1a:	6999      	ldr	r1, [r3, #24]
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	ea40 0301 	orr.w	r3, r0, r1
 8002f26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b8f      	ldr	r3, [pc, #572]	; (800316c <UART_SetConfig+0x2cc>)
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d005      	beq.n	8002f40 <UART_SetConfig+0xa0>
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	; (8003170 <UART_SetConfig+0x2d0>)
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d104      	bne.n	8002f4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f40:	f7fe fe2c 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8002f44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f48:	e003      	b.n	8002f52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f4a:	f7fe fe13 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8002f4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5c:	f040 810c 	bne.w	8003178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f72:	4622      	mov	r2, r4
 8002f74:	462b      	mov	r3, r5
 8002f76:	1891      	adds	r1, r2, r2
 8002f78:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f7a:	415b      	adcs	r3, r3
 8002f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f82:	4621      	mov	r1, r4
 8002f84:	eb12 0801 	adds.w	r8, r2, r1
 8002f88:	4629      	mov	r1, r5
 8002f8a:	eb43 0901 	adc.w	r9, r3, r1
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa2:	4690      	mov	r8, r2
 8002fa4:	4699      	mov	r9, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	eb18 0303 	adds.w	r3, r8, r3
 8002fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	eb49 0303 	adc.w	r3, r9, r3
 8002fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fce:	460b      	mov	r3, r1
 8002fd0:	18db      	adds	r3, r3, r3
 8002fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	eb42 0303 	adc.w	r3, r2, r3
 8002fda:	657b      	str	r3, [r7, #84]	; 0x54
 8002fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fe4:	f7fd f914 	bl	8000210 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4b61      	ldr	r3, [pc, #388]	; (8003174 <UART_SetConfig+0x2d4>)
 8002fee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	011c      	lsls	r4, r3, #4
 8002ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003000:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003010:	415b      	adcs	r3, r3
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003018:	4641      	mov	r1, r8
 800301a:	eb12 0a01 	adds.w	sl, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb43 0b01 	adc.w	fp, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003038:	4692      	mov	sl, r2
 800303a:	469b      	mov	fp, r3
 800303c:	4643      	mov	r3, r8
 800303e:	eb1a 0303 	adds.w	r3, sl, r3
 8003042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003046:	464b      	mov	r3, r9
 8003048:	eb4b 0303 	adc.w	r3, fp, r3
 800304c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800305c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003064:	460b      	mov	r3, r1
 8003066:	18db      	adds	r3, r3, r3
 8003068:	643b      	str	r3, [r7, #64]	; 0x40
 800306a:	4613      	mov	r3, r2
 800306c:	eb42 0303 	adc.w	r3, r2, r3
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
 8003072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800307a:	f7fd f8c9 	bl	8000210 <__aeabi_uldivmod>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4611      	mov	r1, r2
 8003084:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <UART_SetConfig+0x2d4>)
 8003086:	fba3 2301 	umull	r2, r3, r3, r1
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2264      	movs	r2, #100	; 0x64
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	1acb      	subs	r3, r1, r3
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <UART_SetConfig+0x2d4>)
 800309c:	fba3 2302 	umull	r2, r3, r3, r2
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030a8:	441c      	add	r4, r3
 80030aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	1891      	adds	r1, r2, r2
 80030c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030c4:	415b      	adcs	r3, r3
 80030c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030cc:	4641      	mov	r1, r8
 80030ce:	1851      	adds	r1, r2, r1
 80030d0:	6339      	str	r1, [r7, #48]	; 0x30
 80030d2:	4649      	mov	r1, r9
 80030d4:	414b      	adcs	r3, r1
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030e4:	4659      	mov	r1, fp
 80030e6:	00cb      	lsls	r3, r1, #3
 80030e8:	4651      	mov	r1, sl
 80030ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ee:	4651      	mov	r1, sl
 80030f0:	00ca      	lsls	r2, r1, #3
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	4642      	mov	r2, r8
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003100:	464b      	mov	r3, r9
 8003102:	460a      	mov	r2, r1
 8003104:	eb42 0303 	adc.w	r3, r2, r3
 8003108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003118:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800311c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003120:	460b      	mov	r3, r1
 8003122:	18db      	adds	r3, r3, r3
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
 8003126:	4613      	mov	r3, r2
 8003128:	eb42 0303 	adc.w	r3, r2, r3
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003136:	f7fd f86b 	bl	8000210 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <UART_SetConfig+0x2d4>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	2164      	movs	r1, #100	; 0x64
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	3332      	adds	r3, #50	; 0x32
 8003152:	4a08      	ldr	r2, [pc, #32]	; (8003174 <UART_SetConfig+0x2d4>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4422      	add	r2, r4
 8003166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003168:	e105      	b.n	8003376 <UART_SetConfig+0x4d6>
 800316a:	bf00      	nop
 800316c:	40011000 	.word	0x40011000
 8003170:	40011400 	.word	0x40011400
 8003174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317c:	2200      	movs	r2, #0
 800317e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003182:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800318a:	4642      	mov	r2, r8
 800318c:	464b      	mov	r3, r9
 800318e:	1891      	adds	r1, r2, r2
 8003190:	6239      	str	r1, [r7, #32]
 8003192:	415b      	adcs	r3, r3
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
 8003196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800319a:	4641      	mov	r1, r8
 800319c:	1854      	adds	r4, r2, r1
 800319e:	4649      	mov	r1, r9
 80031a0:	eb43 0501 	adc.w	r5, r3, r1
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	00eb      	lsls	r3, r5, #3
 80031ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b2:	00e2      	lsls	r2, r4, #3
 80031b4:	4614      	mov	r4, r2
 80031b6:	461d      	mov	r5, r3
 80031b8:	4643      	mov	r3, r8
 80031ba:	18e3      	adds	r3, r4, r3
 80031bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031c0:	464b      	mov	r3, r9
 80031c2:	eb45 0303 	adc.w	r3, r5, r3
 80031c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031e6:	4629      	mov	r1, r5
 80031e8:	008b      	lsls	r3, r1, #2
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f0:	4621      	mov	r1, r4
 80031f2:	008a      	lsls	r2, r1, #2
 80031f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031f8:	f7fd f80a 	bl	8000210 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4b60      	ldr	r3, [pc, #384]	; (8003384 <UART_SetConfig+0x4e4>)
 8003202:	fba3 2302 	umull	r2, r3, r3, r2
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	011c      	lsls	r4, r3, #4
 800320a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003214:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	1891      	adds	r1, r2, r2
 8003222:	61b9      	str	r1, [r7, #24]
 8003224:	415b      	adcs	r3, r3
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322c:	4641      	mov	r1, r8
 800322e:	1851      	adds	r1, r2, r1
 8003230:	6139      	str	r1, [r7, #16]
 8003232:	4649      	mov	r1, r9
 8003234:	414b      	adcs	r3, r1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003244:	4659      	mov	r1, fp
 8003246:	00cb      	lsls	r3, r1, #3
 8003248:	4651      	mov	r1, sl
 800324a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324e:	4651      	mov	r1, sl
 8003250:	00ca      	lsls	r2, r1, #3
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	4603      	mov	r3, r0
 8003258:	4642      	mov	r2, r8
 800325a:	189b      	adds	r3, r3, r2
 800325c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003260:	464b      	mov	r3, r9
 8003262:	460a      	mov	r2, r1
 8003264:	eb42 0303 	adc.w	r3, r2, r3
 8003268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	67bb      	str	r3, [r7, #120]	; 0x78
 8003276:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003284:	4649      	mov	r1, r9
 8003286:	008b      	lsls	r3, r1, #2
 8003288:	4641      	mov	r1, r8
 800328a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800328e:	4641      	mov	r1, r8
 8003290:	008a      	lsls	r2, r1, #2
 8003292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003296:	f7fc ffbb 	bl	8000210 <__aeabi_uldivmod>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4b39      	ldr	r3, [pc, #228]	; (8003384 <UART_SetConfig+0x4e4>)
 80032a0:	fba3 1302 	umull	r1, r3, r3, r2
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	2164      	movs	r1, #100	; 0x64
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	3332      	adds	r3, #50	; 0x32
 80032b2:	4a34      	ldr	r2, [pc, #208]	; (8003384 <UART_SetConfig+0x4e4>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032be:	441c      	add	r4, r3
 80032c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c4:	2200      	movs	r2, #0
 80032c6:	673b      	str	r3, [r7, #112]	; 0x70
 80032c8:	677a      	str	r2, [r7, #116]	; 0x74
 80032ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032ce:	4642      	mov	r2, r8
 80032d0:	464b      	mov	r3, r9
 80032d2:	1891      	adds	r1, r2, r2
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	415b      	adcs	r3, r3
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032de:	4641      	mov	r1, r8
 80032e0:	1851      	adds	r1, r2, r1
 80032e2:	6039      	str	r1, [r7, #0]
 80032e4:	4649      	mov	r1, r9
 80032e6:	414b      	adcs	r3, r1
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032f6:	4659      	mov	r1, fp
 80032f8:	00cb      	lsls	r3, r1, #3
 80032fa:	4651      	mov	r1, sl
 80032fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003300:	4651      	mov	r1, sl
 8003302:	00ca      	lsls	r2, r1, #3
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	4603      	mov	r3, r0
 800330a:	4642      	mov	r2, r8
 800330c:	189b      	adds	r3, r3, r2
 800330e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003310:	464b      	mov	r3, r9
 8003312:	460a      	mov	r2, r1
 8003314:	eb42 0303 	adc.w	r3, r2, r3
 8003318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	663b      	str	r3, [r7, #96]	; 0x60
 8003324:	667a      	str	r2, [r7, #100]	; 0x64
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003332:	4649      	mov	r1, r9
 8003334:	008b      	lsls	r3, r1, #2
 8003336:	4641      	mov	r1, r8
 8003338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333c:	4641      	mov	r1, r8
 800333e:	008a      	lsls	r2, r1, #2
 8003340:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003344:	f7fc ff64 	bl	8000210 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <UART_SetConfig+0x4e4>)
 800334e:	fba3 1302 	umull	r1, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2164      	movs	r1, #100	; 0x64
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	4a08      	ldr	r2, [pc, #32]	; (8003384 <UART_SetConfig+0x4e4>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	f003 020f 	and.w	r2, r3, #15
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4422      	add	r2, r4
 8003374:	609a      	str	r2, [r3, #8]
}
 8003376:	bf00      	nop
 8003378:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	51eb851f 	.word	0x51eb851f

08003388 <__NVIC_SetPriority>:
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db0a      	blt.n	80033b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	490c      	ldr	r1, [pc, #48]	; (80033d4 <__NVIC_SetPriority+0x4c>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033b0:	e00a      	b.n	80033c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4908      	ldr	r1, [pc, #32]	; (80033d8 <__NVIC_SetPriority+0x50>)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	3b04      	subs	r3, #4
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80033e0:	2100      	movs	r1, #0
 80033e2:	f06f 0004 	mvn.w	r0, #4
 80033e6:	f7ff ffcf 	bl	8003388 <__NVIC_SetPriority>
#endif
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033f6:	f3ef 8305 	mrs	r3, IPSR
 80033fa:	603b      	str	r3, [r7, #0]
  return(result);
 80033fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003402:	f06f 0305 	mvn.w	r3, #5
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	e00c      	b.n	8003424 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <osKernelInitialize+0x44>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <osKernelInitialize+0x44>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003418:	2300      	movs	r3, #0
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	e002      	b.n	8003424 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003424:	687b      	ldr	r3, [r7, #4]
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	2000017c 	.word	0x2000017c

08003438 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800343e:	f3ef 8305 	mrs	r3, IPSR
 8003442:	603b      	str	r3, [r7, #0]
  return(result);
 8003444:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <osKernelStart+0x1a>
    stat = osErrorISR;
 800344a:	f06f 0305 	mvn.w	r3, #5
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	e010      	b.n	8003474 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <osKernelStart+0x48>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d109      	bne.n	800346e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800345a:	f7ff ffbf 	bl	80033dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <osKernelStart+0x48>)
 8003460:	2202      	movs	r2, #2
 8003462:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003464:	f001 f866 	bl	8004534 <vTaskStartScheduler>
      stat = osOK;
 8003468:	2300      	movs	r3, #0
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	e002      	b.n	8003474 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003472:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003474:	687b      	ldr	r3, [r7, #4]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000017c 	.word	0x2000017c

08003484 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b08e      	sub	sp, #56	; 0x38
 8003488:	af04      	add	r7, sp, #16
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003494:	f3ef 8305 	mrs	r3, IPSR
 8003498:	617b      	str	r3, [r7, #20]
  return(result);
 800349a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800349c:	2b00      	cmp	r3, #0
 800349e:	d17e      	bne.n	800359e <osThreadNew+0x11a>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d07b      	beq.n	800359e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80034aa:	2318      	movs	r3, #24
 80034ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d045      	beq.n	800354a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <osThreadNew+0x48>
        name = attr->name;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <osThreadNew+0x6e>
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b38      	cmp	r3, #56	; 0x38
 80034e4:	d805      	bhi.n	80034f2 <osThreadNew+0x6e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <osThreadNew+0x72>
        return (NULL);
 80034f2:	2300      	movs	r3, #0
 80034f4:	e054      	b.n	80035a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00e      	beq.n	800352c <osThreadNew+0xa8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b5b      	cmp	r3, #91	; 0x5b
 8003514:	d90a      	bls.n	800352c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <osThreadNew+0xa8>
        mem = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e010      	b.n	800354e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10c      	bne.n	800354e <osThreadNew+0xca>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d108      	bne.n	800354e <osThreadNew+0xca>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <osThreadNew+0xca>
          mem = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e001      	b.n	800354e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d110      	bne.n	8003576 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800355c:	9202      	str	r2, [sp, #8]
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fe0c 	bl	8004188 <xTaskCreateStatic>
 8003570:	4603      	mov	r3, r0
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e013      	b.n	800359e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d110      	bne.n	800359e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	b29a      	uxth	r2, r3
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fe57 	bl	8004242 <xTaskCreate>
 8003594:	4603      	mov	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d001      	beq.n	800359e <osThreadNew+0x11a>
            hTask = NULL;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800359e:	693b      	ldr	r3, [r7, #16]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035b0:	f3ef 8305 	mrs	r3, IPSR
 80035b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80035b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <osDelay+0x1c>
    stat = osErrorISR;
 80035bc:	f06f 0305 	mvn.w	r3, #5
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	e007      	b.n	80035d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 ff7c 	bl	80044cc <vTaskDelay>
    }
  }

  return (stat);
 80035d4:	68fb      	ldr	r3, [r7, #12]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <vApplicationGetIdleTaskMemory+0x2c>)
 80035f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a06      	ldr	r2, [pc, #24]	; (8003610 <vApplicationGetIdleTaskMemory+0x30>)
 80035f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000180 	.word	0x20000180
 8003610:	200001dc 	.word	0x200001dc

08003614 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <vApplicationGetTimerTaskMemory+0x2c>)
 8003624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a06      	ldr	r2, [pc, #24]	; (8003644 <vApplicationGetTimerTaskMemory+0x30>)
 800362a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	200003dc 	.word	0x200003dc
 8003644:	20000438 	.word	0x20000438

08003648 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f103 0208 	add.w	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003660:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f103 0208 	add.w	r2, r3, #8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f103 0208 	add.w	r2, r3, #8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003700:	d103      	bne.n	800370a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e00c      	b.n	8003724 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3308      	adds	r3, #8
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	e002      	b.n	8003718 <vListInsert+0x2e>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	d2f6      	bcs.n	8003712 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6892      	ldr	r2, [r2, #8]
 8003772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6852      	ldr	r2, [r2, #4]
 800377c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	d103      	bne.n	8003790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1e5a      	subs	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037da:	f002 f84b 	bl	8005874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	3b01      	subs	r3, #1
 800380c:	68f9      	ldr	r1, [r7, #12]
 800380e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	441a      	add	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	22ff      	movs	r2, #255	; 0xff
 8003826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d114      	bne.n	800385a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01a      	beq.n	800386e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3310      	adds	r3, #16
 800383c:	4618      	mov	r0, r3
 800383e:	f001 f903 	bl	8004a48 <xTaskRemoveFromEventList>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d012      	beq.n	800386e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <xQueueGenericReset+0xcc>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	e009      	b.n	800386e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3310      	adds	r3, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fef2 	bl	8003648 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3324      	adds	r3, #36	; 0x24
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff feed 	bl	8003648 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800386e:	f002 f831 	bl	80058d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <xQueueGenericCreateStatic+0x52>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <xQueueGenericCreateStatic+0x56>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <xQueueGenericCreateStatic+0x58>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	623b      	str	r3, [r7, #32]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <xQueueGenericCreateStatic+0x7e>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <xQueueGenericCreateStatic+0x82>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <xQueueGenericCreateStatic+0x84>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	61fb      	str	r3, [r7, #28]
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800391e:	2350      	movs	r3, #80	; 0x50
 8003920:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b50      	cmp	r3, #80	; 0x50
 8003926:	d00a      	beq.n	800393e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	61bb      	str	r3, [r7, #24]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800393e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003952:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f805 	bl	8003970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003968:	4618      	mov	r0, r3
 800396a:	3730      	adds	r7, #48	; 0x30
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e002      	b.n	8003992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800399e:	2101      	movs	r1, #1
 80039a0:	69b8      	ldr	r0, [r7, #24]
 80039a2:	f7ff ff05 	bl	80037b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08e      	sub	sp, #56	; 0x38
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039c6:	2300      	movs	r3, #0
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xQueueGenericSend+0x32>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <xQueueGenericSend+0x40>
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <xQueueGenericSend+0x44>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <xQueueGenericSend+0x46>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <xQueueGenericSend+0x60>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d103      	bne.n	8003a26 <xQueueGenericSend+0x6e>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <xQueueGenericSend+0x72>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <xQueueGenericSend+0x74>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	623b      	str	r3, [r7, #32]
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a46:	f001 f9bd 	bl	8004dc4 <xTaskGetSchedulerState>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <xQueueGenericSend+0x9e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <xQueueGenericSend+0xa2>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <xQueueGenericSend+0xa4>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <xQueueGenericSend+0xbe>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	61fb      	str	r3, [r7, #28]
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a76:	f001 fefd 	bl	8005874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <xQueueGenericSend+0xd4>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d129      	bne.n	8003ae0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a92:	f000 fa0b 	bl	8003eac <prvCopyDataToQueue>
 8003a96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d010      	beq.n	8003ac2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	3324      	adds	r3, #36	; 0x24
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 ffcf 	bl	8004a48 <xTaskRemoveFromEventList>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ab0:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <xQueueGenericSend+0x1f8>)
 8003ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	e00a      	b.n	8003ad8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ac8:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <xQueueGenericSend+0x1f8>)
 8003aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ad8:	f001 fefc 	bl	80058d4 <vPortExitCritical>
				return pdPASS;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e063      	b.n	8003ba8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ae6:	f001 fef5 	bl	80058d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e05c      	b.n	8003ba8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 f809 	bl	8004b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b02:	f001 fee7 	bl	80058d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b06:	f000 fd7b 	bl	8004600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b0a:	f001 feb3 	bl	8005874 <vPortEnterCritical>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b14:	b25b      	sxtb	r3, r3
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1a:	d103      	bne.n	8003b24 <xQueueGenericSend+0x16c>
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b30:	d103      	bne.n	8003b3a <xQueueGenericSend+0x182>
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b3a:	f001 fecb 	bl	80058d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b3e:	1d3a      	adds	r2, r7, #4
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fff8 	bl	8004b3c <xTaskCheckForTimeOut>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d124      	bne.n	8003b9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b54:	f000 faa2 	bl	800409c <prvIsQueueFull>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d018      	beq.n	8003b90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	3310      	adds	r3, #16
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 ff1e 	bl	80049a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b6e:	f000 fa2d 	bl	8003fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b72:	f000 fd53 	bl	800461c <xTaskResumeAll>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f47f af7c 	bne.w	8003a76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <xQueueGenericSend+0x1f8>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	e772      	b.n	8003a76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b92:	f000 fa1b 	bl	8003fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b96:	f000 fd41 	bl	800461c <xTaskResumeAll>
 8003b9a:	e76c      	b.n	8003a76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b9e:	f000 fa15 	bl	8003fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ba2:	f000 fd3b 	bl	800461c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3738      	adds	r7, #56	; 0x38
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b090      	sub	sp, #64	; 0x40
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d103      	bne.n	8003bf0 <xQueueGenericSendFromISR+0x3c>
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <xQueueGenericSendFromISR+0x40>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <xQueueGenericSendFromISR+0x42>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d103      	bne.n	8003c1e <xQueueGenericSendFromISR+0x6a>
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <xQueueGenericSendFromISR+0x6e>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <xQueueGenericSendFromISR+0x70>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	623b      	str	r3, [r7, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c3e:	f001 fefb 	bl	8005a38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c42:	f3ef 8211 	mrs	r2, BASEPRI
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	61fa      	str	r2, [r7, #28]
 8003c58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <xQueueGenericSendFromISR+0xbc>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d12f      	bne.n	8003cd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c86:	f000 f911 	bl	8003eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c92:	d112      	bne.n	8003cba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d016      	beq.n	8003cca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	3324      	adds	r3, #36	; 0x24
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fed1 	bl	8004a48 <xTaskRemoveFromEventList>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00e      	beq.n	8003cca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e007      	b.n	8003cca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	b25a      	sxtb	r2, r3
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003cce:	e001      	b.n	8003cd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3740      	adds	r7, #64	; 0x40
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08c      	sub	sp, #48	; 0x30
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <xQueueReceive+0x30>
	__asm volatile
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	623b      	str	r3, [r7, #32]
}
 8003d18:	bf00      	nop
 8003d1a:	e7fe      	b.n	8003d1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <xQueueReceive+0x3e>
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <xQueueReceive+0x42>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <xQueueReceive+0x44>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <xQueueReceive+0x5e>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	61fb      	str	r3, [r7, #28]
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d4a:	f001 f83b 	bl	8004dc4 <xTaskGetSchedulerState>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <xQueueReceive+0x6e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <xQueueReceive+0x72>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <xQueueReceive+0x74>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <xQueueReceive+0x8e>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	61bb      	str	r3, [r7, #24]
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d7a:	f001 fd7b 	bl	8005874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01f      	beq.n	8003dca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8e:	f000 f8f7 	bl	8003f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00f      	beq.n	8003dc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	3310      	adds	r3, #16
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fe4e 	bl	8004a48 <xTaskRemoveFromEventList>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003db2:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <xQueueReceive+0x1bc>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dc2:	f001 fd87 	bl	80058d4 <vPortExitCritical>
				return pdPASS;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e069      	b.n	8003e9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dd0:	f001 fd80 	bl	80058d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e062      	b.n	8003e9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fe94 	bl	8004b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dec:	f001 fd72 	bl	80058d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003df0:	f000 fc06 	bl	8004600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003df4:	f001 fd3e 	bl	8005874 <vPortEnterCritical>
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dfe:	b25b      	sxtb	r3, r3
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e04:	d103      	bne.n	8003e0e <xQueueReceive+0x122>
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e14:	b25b      	sxtb	r3, r3
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e1a:	d103      	bne.n	8003e24 <xQueueReceive+0x138>
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e24:	f001 fd56 	bl	80058d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e28:	1d3a      	adds	r2, r7, #4
 8003e2a:	f107 0310 	add.w	r3, r7, #16
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fe83 	bl	8004b3c <xTaskCheckForTimeOut>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d123      	bne.n	8003e84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3e:	f000 f917 	bl	8004070 <prvIsQueueEmpty>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d017      	beq.n	8003e78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	3324      	adds	r3, #36	; 0x24
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fda9 	bl	80049a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e58:	f000 f8b8 	bl	8003fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e5c:	f000 fbde 	bl	800461c <xTaskResumeAll>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d189      	bne.n	8003d7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <xQueueReceive+0x1bc>)
 8003e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	e780      	b.n	8003d7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e7a:	f000 f8a7 	bl	8003fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e7e:	f000 fbcd 	bl	800461c <xTaskResumeAll>
 8003e82:	e77a      	b.n	8003d7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e86:	f000 f8a1 	bl	8003fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e8a:	f000 fbc7 	bl	800461c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e90:	f000 f8ee 	bl	8004070 <prvIsQueueEmpty>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f43f af6f 	beq.w	8003d7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3730      	adds	r7, #48	; 0x30
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d14d      	bne.n	8003f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 ff92 	bl	8004e00 <xTaskPriorityDisinherit>
 8003edc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	e043      	b.n	8003f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d119      	bne.n	8003f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6858      	ldr	r0, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	f001 ffec 	bl	8005ed4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	441a      	add	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d32b      	bcc.n	8003f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	e026      	b.n	8003f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68d8      	ldr	r0, [r3, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	f001 ffd2 	bl	8005ed4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	425b      	negs	r3, r3
 8003f3a:	441a      	add	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d207      	bcs.n	8003f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	425b      	negs	r3, r3
 8003f56:	441a      	add	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d105      	bne.n	8003f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f76:	697b      	ldr	r3, [r7, #20]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	441a      	add	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d303      	bcc.n	8003fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68d9      	ldr	r1, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6838      	ldr	r0, [r7, #0]
 8003fc0:	f001 ff88 	bl	8005ed4 <memcpy>
	}
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fd4:	f001 fc4e 	bl	8005874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe0:	e011      	b.n	8004006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3324      	adds	r3, #36	; 0x24
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fd2a 	bl	8004a48 <xTaskRemoveFromEventList>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ffa:	f000 fe01 	bl	8004c00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	3b01      	subs	r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	2b00      	cmp	r3, #0
 800400c:	dce9      	bgt.n	8003fe2 <prvUnlockQueue+0x16>
 800400e:	e000      	b.n	8004012 <prvUnlockQueue+0x46>
					break;
 8004010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	22ff      	movs	r2, #255	; 0xff
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800401a:	f001 fc5b 	bl	80058d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800401e:	f001 fc29 	bl	8005874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800402a:	e011      	b.n	8004050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d012      	beq.n	800405a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3310      	adds	r3, #16
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fd05 	bl	8004a48 <xTaskRemoveFromEventList>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004044:	f000 fddc 	bl	8004c00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004048:	7bbb      	ldrb	r3, [r7, #14]
 800404a:	3b01      	subs	r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004054:	2b00      	cmp	r3, #0
 8004056:	dce9      	bgt.n	800402c <prvUnlockQueue+0x60>
 8004058:	e000      	b.n	800405c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800405a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	22ff      	movs	r2, #255	; 0xff
 8004060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004064:	f001 fc36 	bl	80058d4 <vPortExitCritical>
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004078:	f001 fbfc 	bl	8005874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e001      	b.n	800408e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800408e:	f001 fc21 	bl	80058d4 <vPortExitCritical>

	return xReturn;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040a4:	f001 fbe6 	bl	8005874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d102      	bne.n	80040ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e001      	b.n	80040be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040be:	f001 fc09 	bl	80058d4 <vPortExitCritical>

	return xReturn;
 80040c2:	68fb      	ldr	r3, [r7, #12]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e014      	b.n	8004106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040dc:	4a0f      	ldr	r2, [pc, #60]	; (800411c <vQueueAddToRegistry+0x50>)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040e8:	490c      	ldr	r1, [pc, #48]	; (800411c <vQueueAddToRegistry+0x50>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040f2:	4a0a      	ldr	r2, [pc, #40]	; (800411c <vQueueAddToRegistry+0x50>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040fe:	e006      	b.n	800410e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b07      	cmp	r3, #7
 800410a:	d9e7      	bls.n	80040dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000838 	.word	0x20000838

08004120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004130:	f001 fba0 	bl	8005874 <vPortEnterCritical>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800413a:	b25b      	sxtb	r3, r3
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004140:	d103      	bne.n	800414a <vQueueWaitForMessageRestricted+0x2a>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004150:	b25b      	sxtb	r3, r3
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004156:	d103      	bne.n	8004160 <vQueueWaitForMessageRestricted+0x40>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004160:	f001 fbb8 	bl	80058d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fc3b 	bl	80049f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800417a:	6978      	ldr	r0, [r7, #20]
 800417c:	f7ff ff26 	bl	8003fcc <prvUnlockQueue>
	}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08e      	sub	sp, #56	; 0x38
 800418c:	af04      	add	r7, sp, #16
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	623b      	str	r3, [r7, #32]
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <xTaskCreateStatic+0x46>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	61fb      	str	r3, [r7, #28]
}
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041ce:	235c      	movs	r3, #92	; 0x5c
 80041d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b5c      	cmp	r3, #92	; 0x5c
 80041d6:	d00a      	beq.n	80041ee <xTaskCreateStatic+0x66>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	61bb      	str	r3, [r7, #24]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01e      	beq.n	8004234 <xTaskCreateStatic+0xac>
 80041f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01b      	beq.n	8004234 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004204:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	2202      	movs	r2, #2
 800420a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800420e:	2300      	movs	r3, #0
 8004210:	9303      	str	r3, [sp, #12]
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	9302      	str	r3, [sp, #8]
 8004216:	f107 0314 	add.w	r3, r7, #20
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f850 	bl	80042cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800422c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800422e:	f000 f8dd 	bl	80043ec <prvAddNewTaskToReadyList>
 8004232:	e001      	b.n	8004238 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004238:	697b      	ldr	r3, [r7, #20]
	}
 800423a:	4618      	mov	r0, r3
 800423c:	3728      	adds	r7, #40	; 0x28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004242:	b580      	push	{r7, lr}
 8004244:	b08c      	sub	sp, #48	; 0x30
 8004246:	af04      	add	r7, sp, #16
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4618      	mov	r0, r3
 8004258:	f001 fc2e 	bl	8005ab8 <pvPortMalloc>
 800425c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00e      	beq.n	8004282 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004264:	205c      	movs	r0, #92	; 0x5c
 8004266:	f001 fc27 	bl	8005ab8 <pvPortMalloc>
 800426a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
 8004278:	e005      	b.n	8004286 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f001 fce8 	bl	8005c50 <vPortFree>
 8004280:	e001      	b.n	8004286 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d017      	beq.n	80042bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	2300      	movs	r3, #0
 8004298:	9303      	str	r3, [sp, #12]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	9302      	str	r3, [sp, #8]
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f80e 	bl	80042cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042b0:	69f8      	ldr	r0, [r7, #28]
 80042b2:	f000 f89b 	bl	80043ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	e002      	b.n	80042c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042c2:	69bb      	ldr	r3, [r7, #24]
	}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	461a      	mov	r2, r3
 80042e4:	21a5      	movs	r1, #165	; 0xa5
 80042e6:	f001 fe03 	bl	8005ef0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042f4:	3b01      	subs	r3, #1
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <prvInitialiseNewTask+0x58>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	617b      	str	r3, [r7, #20]
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01f      	beq.n	800436a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	e012      	b.n	8004356 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	7819      	ldrb	r1, [r3, #0]
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	3334      	adds	r3, #52	; 0x34
 8004340:	460a      	mov	r2, r1
 8004342:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3301      	adds	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b0f      	cmp	r3, #15
 800435a:	d9e9      	bls.n	8004330 <prvInitialiseNewTask+0x64>
 800435c:	e000      	b.n	8004360 <prvInitialiseNewTask+0x94>
			{
				break;
 800435e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004368:	e003      	b.n	8004372 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	2b37      	cmp	r3, #55	; 0x37
 8004376:	d901      	bls.n	800437c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004378:	2337      	movs	r3, #55	; 0x37
 800437a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004380:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004386:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	2200      	movs	r2, #0
 800438c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	3304      	adds	r3, #4
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff f978 	bl	8003688 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	3318      	adds	r3, #24
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff f973 	bl	8003688 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	2200      	movs	r2, #0
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	69b8      	ldr	r0, [r7, #24]
 80043cc:	f001 f928 	bl	8005620 <pxPortInitialiseStack>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e2:	bf00      	nop
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043f4:	f001 fa3e 	bl	8005874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043f8:	4b2d      	ldr	r3, [pc, #180]	; (80044b0 <prvAddNewTaskToReadyList+0xc4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	4a2c      	ldr	r2, [pc, #176]	; (80044b0 <prvAddNewTaskToReadyList+0xc4>)
 8004400:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <prvAddNewTaskToReadyList+0xc8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800440a:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <prvAddNewTaskToReadyList+0xc8>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004410:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <prvAddNewTaskToReadyList+0xc4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d110      	bne.n	800443a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004418:	f000 fc16 	bl	8004c48 <prvInitialiseTaskLists>
 800441c:	e00d      	b.n	800443a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <prvAddNewTaskToReadyList+0xcc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <prvAddNewTaskToReadyList+0xc8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	429a      	cmp	r2, r3
 8004432:	d802      	bhi.n	800443a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004434:	4a1f      	ldr	r2, [pc, #124]	; (80044b4 <prvAddNewTaskToReadyList+0xc8>)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800443a:	4b20      	ldr	r3, [pc, #128]	; (80044bc <prvAddNewTaskToReadyList+0xd0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3301      	adds	r3, #1
 8004440:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <prvAddNewTaskToReadyList+0xd0>)
 8004442:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <prvAddNewTaskToReadyList+0xd0>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <prvAddNewTaskToReadyList+0xd4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d903      	bls.n	8004460 <prvAddNewTaskToReadyList+0x74>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <prvAddNewTaskToReadyList+0xd4>)
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <prvAddNewTaskToReadyList+0xd8>)
 800446e:	441a      	add	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7ff f913 	bl	80036a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800447c:	f001 fa2a 	bl	80058d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004480:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <prvAddNewTaskToReadyList+0xcc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <prvAddNewTaskToReadyList+0xc8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	429a      	cmp	r2, r3
 8004494:	d207      	bcs.n	80044a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <prvAddNewTaskToReadyList+0xdc>)
 8004498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000d4c 	.word	0x20000d4c
 80044b4:	20000878 	.word	0x20000878
 80044b8:	20000d58 	.word	0x20000d58
 80044bc:	20000d68 	.word	0x20000d68
 80044c0:	20000d54 	.word	0x20000d54
 80044c4:	2000087c 	.word	0x2000087c
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d017      	beq.n	800450e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <vTaskDelay+0x60>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <vTaskDelay+0x30>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60bb      	str	r3, [r7, #8]
}
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044fc:	f000 f880 	bl	8004600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004500:	2100      	movs	r1, #0
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fcea 	bl	8004edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004508:	f000 f888 	bl	800461c <xTaskResumeAll>
 800450c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d107      	bne.n	8004524 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <vTaskDelay+0x64>)
 8004516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000d74 	.word	0x20000d74
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004542:	463a      	mov	r2, r7
 8004544:	1d39      	adds	r1, r7, #4
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff f848 	bl	80035e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	9202      	str	r2, [sp, #8]
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	2300      	movs	r3, #0
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	460a      	mov	r2, r1
 8004562:	4921      	ldr	r1, [pc, #132]	; (80045e8 <vTaskStartScheduler+0xb4>)
 8004564:	4821      	ldr	r0, [pc, #132]	; (80045ec <vTaskStartScheduler+0xb8>)
 8004566:	f7ff fe0f 	bl	8004188 <xTaskCreateStatic>
 800456a:	4603      	mov	r3, r0
 800456c:	4a20      	ldr	r2, [pc, #128]	; (80045f0 <vTaskStartScheduler+0xbc>)
 800456e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004570:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <vTaskStartScheduler+0xbc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004578:	2301      	movs	r3, #1
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e001      	b.n	8004582 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d102      	bne.n	800458e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004588:	f000 fcfc 	bl	8004f84 <xTimerCreateTimerTask>
 800458c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d116      	bne.n	80045c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	613b      	str	r3, [r7, #16]
}
 80045a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045a8:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <vTaskStartScheduler+0xc0>)
 80045aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045b0:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <vTaskStartScheduler+0xc4>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <vTaskStartScheduler+0xc8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045bc:	f001 f8b8 	bl	8005730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045c0:	e00e      	b.n	80045e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c8:	d10a      	bne.n	80045e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60fb      	str	r3, [r7, #12]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <vTaskStartScheduler+0xaa>
}
 80045e0:	bf00      	nop
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	08005f24 	.word	0x08005f24
 80045ec:	08004c19 	.word	0x08004c19
 80045f0:	20000d70 	.word	0x20000d70
 80045f4:	20000d6c 	.word	0x20000d6c
 80045f8:	20000d58 	.word	0x20000d58
 80045fc:	20000d50 	.word	0x20000d50

08004600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <vTaskSuspendAll+0x18>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a03      	ldr	r2, [pc, #12]	; (8004618 <vTaskSuspendAll+0x18>)
 800460c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	20000d74 	.word	0x20000d74

0800461c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <xTaskResumeAll+0x118>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <xTaskResumeAll+0x2c>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	603b      	str	r3, [r7, #0]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004648:	f001 f914 	bl	8005874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <xTaskResumeAll+0x118>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3b01      	subs	r3, #1
 8004652:	4a38      	ldr	r2, [pc, #224]	; (8004734 <xTaskResumeAll+0x118>)
 8004654:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004656:	4b37      	ldr	r3, [pc, #220]	; (8004734 <xTaskResumeAll+0x118>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d162      	bne.n	8004724 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800465e:	4b36      	ldr	r3, [pc, #216]	; (8004738 <xTaskResumeAll+0x11c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d05e      	beq.n	8004724 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004666:	e02f      	b.n	80046c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004668:	4b34      	ldr	r3, [pc, #208]	; (800473c <xTaskResumeAll+0x120>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3318      	adds	r3, #24
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff f871 	bl	800375c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3304      	adds	r3, #4
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff f86c 	bl	800375c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <xTaskResumeAll+0x124>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d903      	bls.n	8004698 <xTaskResumeAll+0x7c>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <xTaskResumeAll+0x124>)
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a27      	ldr	r2, [pc, #156]	; (8004744 <xTaskResumeAll+0x128>)
 80046a6:	441a      	add	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f7fe fff7 	bl	80036a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	4b23      	ldr	r3, [pc, #140]	; (8004748 <xTaskResumeAll+0x12c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <xTaskResumeAll+0x130>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c8:	4b1c      	ldr	r3, [pc, #112]	; (800473c <xTaskResumeAll+0x120>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1cb      	bne.n	8004668 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046d6:	f000 fb55 	bl	8004d84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046da:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <xTaskResumeAll+0x134>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046e6:	f000 f847 	bl	8004778 <xTaskIncrementTick>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80046f0:	4b16      	ldr	r3, [pc, #88]	; (800474c <xTaskResumeAll+0x130>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f1      	bne.n	80046e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <xTaskResumeAll+0x134>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004708:	4b10      	ldr	r3, [pc, #64]	; (800474c <xTaskResumeAll+0x130>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d009      	beq.n	8004724 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004710:	2301      	movs	r3, #1
 8004712:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <xTaskResumeAll+0x138>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004724:	f001 f8d6 	bl	80058d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004728:	68bb      	ldr	r3, [r7, #8]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000d74 	.word	0x20000d74
 8004738:	20000d4c 	.word	0x20000d4c
 800473c:	20000d0c 	.word	0x20000d0c
 8004740:	20000d54 	.word	0x20000d54
 8004744:	2000087c 	.word	0x2000087c
 8004748:	20000878 	.word	0x20000878
 800474c:	20000d60 	.word	0x20000d60
 8004750:	20000d5c 	.word	0x20000d5c
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <xTaskGetTickCount+0x1c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004764:	687b      	ldr	r3, [r7, #4]
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000d50 	.word	0x20000d50

08004778 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004782:	4b4f      	ldr	r3, [pc, #316]	; (80048c0 <xTaskIncrementTick+0x148>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f040 808f 	bne.w	80048aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800478c:	4b4d      	ldr	r3, [pc, #308]	; (80048c4 <xTaskIncrementTick+0x14c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004794:	4a4b      	ldr	r2, [pc, #300]	; (80048c4 <xTaskIncrementTick+0x14c>)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d120      	bne.n	80047e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047a0:	4b49      	ldr	r3, [pc, #292]	; (80048c8 <xTaskIncrementTick+0x150>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	603b      	str	r3, [r7, #0]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <xTaskIncrementTick+0x46>
 80047c0:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <xTaskIncrementTick+0x150>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	4b41      	ldr	r3, [pc, #260]	; (80048cc <xTaskIncrementTick+0x154>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a3f      	ldr	r2, [pc, #252]	; (80048c8 <xTaskIncrementTick+0x150>)
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4a3f      	ldr	r2, [pc, #252]	; (80048cc <xTaskIncrementTick+0x154>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	4b3e      	ldr	r3, [pc, #248]	; (80048d0 <xTaskIncrementTick+0x158>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	4a3d      	ldr	r2, [pc, #244]	; (80048d0 <xTaskIncrementTick+0x158>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	f000 fad1 	bl	8004d84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <xTaskIncrementTick+0x15c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d349      	bcc.n	8004880 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ec:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <xTaskIncrementTick+0x150>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f6:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <xTaskIncrementTick+0x15c>)
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047fc:	601a      	str	r2, [r3, #0]
					break;
 80047fe:	e03f      	b.n	8004880 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <xTaskIncrementTick+0x150>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d203      	bcs.n	8004820 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004818:	4a2e      	ldr	r2, [pc, #184]	; (80048d4 <xTaskIncrementTick+0x15c>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800481e:	e02f      	b.n	8004880 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe ff99 	bl	800375c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	3318      	adds	r3, #24
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe ff90 	bl	800375c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <xTaskIncrementTick+0x160>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d903      	bls.n	8004850 <xTaskIncrementTick+0xd8>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <xTaskIncrementTick+0x160>)
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <xTaskIncrementTick+0x164>)
 800485e:	441a      	add	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	3304      	adds	r3, #4
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f7fe ff1b 	bl	80036a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <xTaskIncrementTick+0x168>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	429a      	cmp	r2, r3
 8004878:	d3b8      	bcc.n	80047ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800487e:	e7b5      	b.n	80047ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004880:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <xTaskIncrementTick+0x168>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	4915      	ldr	r1, [pc, #84]	; (80048dc <xTaskIncrementTick+0x164>)
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d901      	bls.n	800489c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <xTaskIncrementTick+0x16c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e004      	b.n	80048b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <xTaskIncrementTick+0x170>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	4a0d      	ldr	r2, [pc, #52]	; (80048e8 <xTaskIncrementTick+0x170>)
 80048b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048b4:	697b      	ldr	r3, [r7, #20]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000d74 	.word	0x20000d74
 80048c4:	20000d50 	.word	0x20000d50
 80048c8:	20000d04 	.word	0x20000d04
 80048cc:	20000d08 	.word	0x20000d08
 80048d0:	20000d64 	.word	0x20000d64
 80048d4:	20000d6c 	.word	0x20000d6c
 80048d8:	20000d54 	.word	0x20000d54
 80048dc:	2000087c 	.word	0x2000087c
 80048e0:	20000878 	.word	0x20000878
 80048e4:	20000d60 	.word	0x20000d60
 80048e8:	20000d5c 	.word	0x20000d5c

080048ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048f2:	4b28      	ldr	r3, [pc, #160]	; (8004994 <vTaskSwitchContext+0xa8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <vTaskSwitchContext+0xac>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004900:	e041      	b.n	8004986 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004902:	4b25      	ldr	r3, [pc, #148]	; (8004998 <vTaskSwitchContext+0xac>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004908:	4b24      	ldr	r3, [pc, #144]	; (800499c <vTaskSwitchContext+0xb0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e010      	b.n	8004932 <vTaskSwitchContext+0x46>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <vTaskSwitchContext+0x40>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	607b      	str	r3, [r7, #4]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <vTaskSwitchContext+0x3e>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	491b      	ldr	r1, [pc, #108]	; (80049a0 <vTaskSwitchContext+0xb4>)
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0e4      	beq.n	8004910 <vTaskSwitchContext+0x24>
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <vTaskSwitchContext+0xb4>)
 8004952:	4413      	add	r3, r2
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	3308      	adds	r3, #8
 8004968:	429a      	cmp	r2, r3
 800496a:	d104      	bne.n	8004976 <vTaskSwitchContext+0x8a>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <vTaskSwitchContext+0xb8>)
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4a06      	ldr	r2, [pc, #24]	; (800499c <vTaskSwitchContext+0xb0>)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6013      	str	r3, [r2, #0]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000d74 	.word	0x20000d74
 8004998:	20000d60 	.word	0x20000d60
 800499c:	20000d54 	.word	0x20000d54
 80049a0:	2000087c 	.word	0x2000087c
 80049a4:	20000878 	.word	0x20000878

080049a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	60fb      	str	r3, [r7, #12]
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <vTaskPlaceOnEventList+0x44>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3318      	adds	r3, #24
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fe fe87 	bl	80036ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049dc:	2101      	movs	r1, #1
 80049de:	6838      	ldr	r0, [r7, #0]
 80049e0:	f000 fa7c 	bl	8004edc <prvAddCurrentTaskToDelayedList>
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000878 	.word	0x20000878

080049f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	617b      	str	r3, [r7, #20]
}
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a18:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3318      	adds	r3, #24
 8004a1e:	4619      	mov	r1, r3
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7fe fe3e 	bl	80036a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	68b8      	ldr	r0, [r7, #8]
 8004a36:	f000 fa51 	bl	8004edc <prvAddCurrentTaskToDelayedList>
	}
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000878 	.word	0x20000878

08004a48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	60fb      	str	r3, [r7, #12]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	3318      	adds	r3, #24
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fe fe6f 	bl	800375c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <xTaskRemoveFromEventList+0xb0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11d      	bne.n	8004ac2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fe66 	bl	800375c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	4b19      	ldr	r3, [pc, #100]	; (8004afc <xTaskRemoveFromEventList+0xb4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d903      	bls.n	8004aa4 <xTaskRemoveFromEventList+0x5c>
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <xTaskRemoveFromEventList+0xb4>)
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <xTaskRemoveFromEventList+0xb8>)
 8004ab2:	441a      	add	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7fe fdf1 	bl	80036a2 <vListInsertEnd>
 8004ac0:	e005      	b.n	8004ace <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3318      	adds	r3, #24
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	480e      	ldr	r0, [pc, #56]	; (8004b04 <xTaskRemoveFromEventList+0xbc>)
 8004aca:	f7fe fdea 	bl	80036a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <xTaskRemoveFromEventList+0xc0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d905      	bls.n	8004ae8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <xTaskRemoveFromEventList+0xc4>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e001      	b.n	8004aec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004aec:	697b      	ldr	r3, [r7, #20]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000d74 	.word	0x20000d74
 8004afc:	20000d54 	.word	0x20000d54
 8004b00:	2000087c 	.word	0x2000087c
 8004b04:	20000d0c 	.word	0x20000d0c
 8004b08:	20000878 	.word	0x20000878
 8004b0c:	20000d60 	.word	0x20000d60

08004b10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <vTaskInternalSetTimeOutState+0x24>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <vTaskInternalSetTimeOutState+0x28>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	605a      	str	r2, [r3, #4]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	20000d64 	.word	0x20000d64
 8004b38:	20000d50 	.word	0x20000d50

08004b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	613b      	str	r3, [r7, #16]
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	60fb      	str	r3, [r7, #12]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b7e:	f000 fe79 	bl	8005874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <xTaskCheckForTimeOut+0xbc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b9a:	d102      	bne.n	8004ba2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	e023      	b.n	8004bea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <xTaskCheckForTimeOut+0xc0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d007      	beq.n	8004bbe <xTaskCheckForTimeOut+0x82>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	e015      	b.n	8004bea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d20b      	bcs.n	8004be0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad2      	subs	r2, r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ff9b 	bl	8004b10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	e004      	b.n	8004bea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bea:	f000 fe73 	bl	80058d4 <vPortExitCritical>

	return xReturn;
 8004bee:	69fb      	ldr	r3, [r7, #28]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000d50 	.word	0x20000d50
 8004bfc:	20000d64 	.word	0x20000d64

08004c00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <vTaskMissedYield+0x14>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	20000d60 	.word	0x20000d60

08004c18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c20:	f000 f852 	bl	8004cc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <prvIdleTask+0x28>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d9f9      	bls.n	8004c20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <prvIdleTask+0x2c>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c3c:	e7f0      	b.n	8004c20 <prvIdleTask+0x8>
 8004c3e:	bf00      	nop
 8004c40:	2000087c 	.word	0x2000087c
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c4e:	2300      	movs	r3, #0
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	e00c      	b.n	8004c6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <prvInitialiseTaskLists+0x60>)
 8004c60:	4413      	add	r3, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fcf0 	bl	8003648 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b37      	cmp	r3, #55	; 0x37
 8004c72:	d9ef      	bls.n	8004c54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c74:	480d      	ldr	r0, [pc, #52]	; (8004cac <prvInitialiseTaskLists+0x64>)
 8004c76:	f7fe fce7 	bl	8003648 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c7a:	480d      	ldr	r0, [pc, #52]	; (8004cb0 <prvInitialiseTaskLists+0x68>)
 8004c7c:	f7fe fce4 	bl	8003648 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c80:	480c      	ldr	r0, [pc, #48]	; (8004cb4 <prvInitialiseTaskLists+0x6c>)
 8004c82:	f7fe fce1 	bl	8003648 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c86:	480c      	ldr	r0, [pc, #48]	; (8004cb8 <prvInitialiseTaskLists+0x70>)
 8004c88:	f7fe fcde 	bl	8003648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c8c:	480b      	ldr	r0, [pc, #44]	; (8004cbc <prvInitialiseTaskLists+0x74>)
 8004c8e:	f7fe fcdb 	bl	8003648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <prvInitialiseTaskLists+0x78>)
 8004c94:	4a05      	ldr	r2, [pc, #20]	; (8004cac <prvInitialiseTaskLists+0x64>)
 8004c96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <prvInitialiseTaskLists+0x7c>)
 8004c9a:	4a05      	ldr	r2, [pc, #20]	; (8004cb0 <prvInitialiseTaskLists+0x68>)
 8004c9c:	601a      	str	r2, [r3, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	2000087c 	.word	0x2000087c
 8004cac:	20000cdc 	.word	0x20000cdc
 8004cb0:	20000cf0 	.word	0x20000cf0
 8004cb4:	20000d0c 	.word	0x20000d0c
 8004cb8:	20000d20 	.word	0x20000d20
 8004cbc:	20000d38 	.word	0x20000d38
 8004cc0:	20000d04 	.word	0x20000d04
 8004cc4:	20000d08 	.word	0x20000d08

08004cc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cce:	e019      	b.n	8004d04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cd0:	f000 fdd0 	bl	8005874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cd4:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <prvCheckTasksWaitingTermination+0x50>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fd3b 	bl	800375c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <prvCheckTasksWaitingTermination+0x54>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <prvCheckTasksWaitingTermination+0x54>)
 8004cee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <prvCheckTasksWaitingTermination+0x58>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <prvCheckTasksWaitingTermination+0x58>)
 8004cf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cfa:	f000 fdeb 	bl	80058d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f810 	bl	8004d24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <prvCheckTasksWaitingTermination+0x58>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e1      	bne.n	8004cd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000d20 	.word	0x20000d20
 8004d1c:	20000d4c 	.word	0x20000d4c
 8004d20:	20000d34 	.word	0x20000d34

08004d24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d108      	bne.n	8004d48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 ff88 	bl	8005c50 <vPortFree>
				vPortFree( pxTCB );
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 ff85 	bl	8005c50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d46:	e018      	b.n	8004d7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d103      	bne.n	8004d5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 ff7c 	bl	8005c50 <vPortFree>
	}
 8004d58:	e00f      	b.n	8004d7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d00a      	beq.n	8004d7a <prvDeleteTCB+0x56>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	60fb      	str	r3, [r7, #12]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <prvDeleteTCB+0x54>
	}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <prvResetNextTaskUnblockTime+0x38>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d104      	bne.n	8004d9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d9c:	e008      	b.n	8004db0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <prvResetNextTaskUnblockTime+0x38>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4a04      	ldr	r2, [pc, #16]	; (8004dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20000d04 	.word	0x20000d04
 8004dc0:	20000d6c 	.word	0x20000d6c

08004dc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004dca:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <xTaskGetSchedulerState+0x34>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	e008      	b.n	8004dea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd8:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <xTaskGetSchedulerState+0x38>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004de0:	2302      	movs	r3, #2
 8004de2:	607b      	str	r3, [r7, #4]
 8004de4:	e001      	b.n	8004dea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dea:	687b      	ldr	r3, [r7, #4]
	}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	20000d58 	.word	0x20000d58
 8004dfc:	20000d74 	.word	0x20000d74

08004e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d056      	beq.n	8004ec4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e16:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <xTaskPriorityDisinherit+0xd0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d00a      	beq.n	8004e36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60bb      	str	r3, [r7, #8]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d02c      	beq.n	8004ec4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d128      	bne.n	8004ec4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fc70 	bl	800375c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <xTaskPriorityDisinherit+0xd4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d903      	bls.n	8004ea4 <xTaskPriorityDisinherit+0xa4>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	4a0c      	ldr	r2, [pc, #48]	; (8004ed4 <xTaskPriorityDisinherit+0xd4>)
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <xTaskPriorityDisinherit+0xd8>)
 8004eb2:	441a      	add	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7fe fbf1 	bl	80036a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ec4:	697b      	ldr	r3, [r7, #20]
	}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000878 	.word	0x20000878
 8004ed4:	20000d54 	.word	0x20000d54
 8004ed8:	2000087c 	.word	0x2000087c

08004edc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ee6:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eec:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fc32 	bl	800375c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004efe:	d10a      	bne.n	8004f16 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4819      	ldr	r0, [pc, #100]	; (8004f74 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f10:	f7fe fbc7 	bl	80036a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f14:	e026      	b.n	8004f64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f1e:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d209      	bcs.n	8004f42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fe fbd5 	bl	80036ea <vListInsert>
}
 8004f40:	e010      	b.n	8004f64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f42:	4b0e      	ldr	r3, [pc, #56]	; (8004f7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fe fbcb 	bl	80036ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d202      	bcs.n	8004f64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6013      	str	r3, [r2, #0]
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000d50 	.word	0x20000d50
 8004f70:	20000878 	.word	0x20000878
 8004f74:	20000d38 	.word	0x20000d38
 8004f78:	20000d08 	.word	0x20000d08
 8004f7c:	20000d04 	.word	0x20000d04
 8004f80:	20000d6c 	.word	0x20000d6c

08004f84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f8e:	f000 fb07 	bl	80055a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f92:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <xTimerCreateTimerTask+0x80>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d021      	beq.n	8004fde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fa2:	1d3a      	adds	r2, r7, #4
 8004fa4:	f107 0108 	add.w	r1, r7, #8
 8004fa8:	f107 030c 	add.w	r3, r7, #12
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe fb31 	bl	8003614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	9202      	str	r2, [sp, #8]
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	4910      	ldr	r1, [pc, #64]	; (8005008 <xTimerCreateTimerTask+0x84>)
 8004fc6:	4811      	ldr	r0, [pc, #68]	; (800500c <xTimerCreateTimerTask+0x88>)
 8004fc8:	f7ff f8de 	bl	8004188 <xTaskCreateStatic>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4a10      	ldr	r2, [pc, #64]	; (8005010 <xTimerCreateTimerTask+0x8c>)
 8004fd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <xTimerCreateTimerTask+0x8c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	613b      	str	r3, [r7, #16]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ffa:	697b      	ldr	r3, [r7, #20]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000da8 	.word	0x20000da8
 8005008:	08005f2c 	.word	0x08005f2c
 800500c:	08005149 	.word	0x08005149
 8005010:	20000dac 	.word	0x20000dac

08005014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08a      	sub	sp, #40	; 0x28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xTimerGenericCommand+0x2e>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	623b      	str	r3, [r7, #32]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005042:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <xTimerGenericCommand+0x98>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d02a      	beq.n	80050a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b05      	cmp	r3, #5
 800505a:	dc18      	bgt.n	800508e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800505c:	f7ff feb2 	bl	8004dc4 <xTaskGetSchedulerState>
 8005060:	4603      	mov	r3, r0
 8005062:	2b02      	cmp	r3, #2
 8005064:	d109      	bne.n	800507a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <xTimerGenericCommand+0x98>)
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	f107 0110 	add.w	r1, r7, #16
 800506e:	2300      	movs	r3, #0
 8005070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005072:	f7fe fca1 	bl	80039b8 <xQueueGenericSend>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24
 8005078:	e012      	b.n	80050a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <xTimerGenericCommand+0x98>)
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	f107 0110 	add.w	r1, r7, #16
 8005082:	2300      	movs	r3, #0
 8005084:	2200      	movs	r2, #0
 8005086:	f7fe fc97 	bl	80039b8 <xQueueGenericSend>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24
 800508c:	e008      	b.n	80050a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <xTimerGenericCommand+0x98>)
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	f107 0110 	add.w	r1, r7, #16
 8005096:	2300      	movs	r3, #0
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	f7fe fd8b 	bl	8003bb4 <xQueueGenericSendFromISR>
 800509e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3728      	adds	r7, #40	; 0x28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000da8 	.word	0x20000da8

080050b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ba:	4b22      	ldr	r3, [pc, #136]	; (8005144 <prvProcessExpiredTimer+0x94>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fb47 	bl	800375c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d022      	beq.n	8005122 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	18d1      	adds	r1, r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	f000 f8d1 	bl	8005290 <prvInsertTimerInActiveList>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01f      	beq.n	8005134 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050f4:	2300      	movs	r3, #0
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	2100      	movs	r1, #0
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7ff ff88 	bl	8005014 <xTimerGenericCommand>
 8005104:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d113      	bne.n	8005134 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	60fb      	str	r3, [r7, #12]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	b2da      	uxtb	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	6978      	ldr	r0, [r7, #20]
 800513a:	4798      	blx	r3
}
 800513c:	bf00      	nop
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000da0 	.word	0x20000da0

08005148 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	4618      	mov	r0, r3
 8005156:	f000 f857 	bl	8005208 <prvGetNextExpireTime>
 800515a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4619      	mov	r1, r3
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f803 	bl	800516c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005166:	f000 f8d5 	bl	8005314 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800516a:	e7f1      	b.n	8005150 <prvTimerTask+0x8>

0800516c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005176:	f7ff fa43 	bl	8004600 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f866 	bl	8005250 <prvSampleTimeNow>
 8005184:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d130      	bne.n	80051ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <prvProcessTimerOrBlockTask+0x3c>
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	429a      	cmp	r2, r3
 8005198:	d806      	bhi.n	80051a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800519a:	f7ff fa3f 	bl	800461c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800519e:	68f9      	ldr	r1, [r7, #12]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ff85 	bl	80050b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051a6:	e024      	b.n	80051f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <prvProcessTimerOrBlockTask+0x90>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <prvProcessTimerOrBlockTask+0x50>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <prvProcessTimerOrBlockTask+0x52>
 80051bc:	2300      	movs	r3, #0
 80051be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <prvProcessTimerOrBlockTask+0x94>)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	4619      	mov	r1, r3
 80051ce:	f7fe ffa7 	bl	8004120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80051d2:	f7ff fa23 	bl	800461c <xTaskResumeAll>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <prvProcessTimerOrBlockTask+0x98>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	f3bf 8f6f 	isb	sy
}
 80051ec:	e001      	b.n	80051f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051ee:	f7ff fa15 	bl	800461c <xTaskResumeAll>
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000da4 	.word	0x20000da4
 8005200:	20000da8 	.word	0x20000da8
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005210:	4b0e      	ldr	r3, [pc, #56]	; (800524c <prvGetNextExpireTime+0x44>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <prvGetNextExpireTime+0x16>
 800521a:	2201      	movs	r2, #1
 800521c:	e000      	b.n	8005220 <prvGetNextExpireTime+0x18>
 800521e:	2200      	movs	r2, #0
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d105      	bne.n	8005238 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800522c:	4b07      	ldr	r3, [pc, #28]	; (800524c <prvGetNextExpireTime+0x44>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e001      	b.n	800523c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800523c:	68fb      	ldr	r3, [r7, #12]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000da0 	.word	0x20000da0

08005250 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005258:	f7ff fa7e 	bl	8004758 <xTaskGetTickCount>
 800525c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <prvSampleTimeNow+0x3c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d205      	bcs.n	8005274 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005268:	f000 f936 	bl	80054d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e002      	b.n	800527a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800527a:	4a04      	ldr	r2, [pc, #16]	; (800528c <prvSampleTimeNow+0x3c>)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005280:	68fb      	ldr	r3, [r7, #12]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000db0 	.word	0x20000db0

08005290 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d812      	bhi.n	80052dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e01b      	b.n	8005302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052ca:	4b10      	ldr	r3, [pc, #64]	; (800530c <prvInsertTimerInActiveList+0x7c>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f7fe fa08 	bl	80036ea <vListInsert>
 80052da:	e012      	b.n	8005302 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d206      	bcs.n	80052f2 <prvInsertTimerInActiveList+0x62>
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d302      	bcc.n	80052f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e007      	b.n	8005302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <prvInsertTimerInActiveList+0x80>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f7fe f9f4 	bl	80036ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005302:	697b      	ldr	r3, [r7, #20]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000da4 	.word	0x20000da4
 8005310:	20000da0 	.word	0x20000da0

08005314 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08e      	sub	sp, #56	; 0x38
 8005318:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800531a:	e0ca      	b.n	80054b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	da18      	bge.n	8005354 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	3304      	adds	r3, #4
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	61fb      	str	r3, [r7, #28]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800534a:	6850      	ldr	r0, [r2, #4]
 800534c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800534e:	6892      	ldr	r2, [r2, #8]
 8005350:	4611      	mov	r1, r2
 8005352:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f2c0 80aa 	blt.w	80054b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe f9f5 	bl	800375c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005372:	463b      	mov	r3, r7
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff ff6b 	bl	8005250 <prvSampleTimeNow>
 800537a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b09      	cmp	r3, #9
 8005380:	f200 8097 	bhi.w	80054b2 <prvProcessReceivedCommands+0x19e>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <prvProcessReceivedCommands+0x78>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053b5 	.word	0x080053b5
 8005398:	08005429 	.word	0x08005429
 800539c:	0800543d 	.word	0x0800543d
 80053a0:	08005487 	.word	0x08005487
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053b5 	.word	0x080053b5
 80053ac:	08005429 	.word	0x08005429
 80053b0:	0800543d 	.word	0x0800543d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	18d1      	adds	r1, r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d4:	f7ff ff5c 	bl	8005290 <prvInsertTimerInActiveList>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d069      	beq.n	80054b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05e      	beq.n	80054b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	441a      	add	r2, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2300      	movs	r3, #0
 8005402:	2100      	movs	r1, #0
 8005404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005406:	f7ff fe05 	bl	8005014 <xTimerGenericCommand>
 800540a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d14f      	bne.n	80054b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	61bb      	str	r3, [r7, #24]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800542e:	f023 0301 	bic.w	r3, r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800543a:	e03a      	b.n	80054b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	617b      	str	r3, [r7, #20]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	18d1      	adds	r1, r2, r3
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005480:	f7ff ff06 	bl	8005290 <prvInsertTimerInActiveList>
					break;
 8005484:	e015      	b.n	80054b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005496:	f000 fbdb 	bl	8005c50 <vPortFree>
 800549a:	e00a      	b.n	80054b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054ae:	e000      	b.n	80054b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80054b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <prvProcessReceivedCommands+0x1c0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	1d39      	adds	r1, r7, #4
 80054b8:	2200      	movs	r2, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe fc16 	bl	8003cec <xQueueReceive>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f47f af2a 	bne.w	800531c <prvProcessReceivedCommands+0x8>
	}
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3730      	adds	r7, #48	; 0x30
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000da8 	.word	0x20000da8

080054d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054de:	e048      	b.n	8005572 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054e0:	4b2d      	ldr	r3, [pc, #180]	; (8005598 <prvSwitchTimerLists+0xc0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ea:	4b2b      	ldr	r3, [pc, #172]	; (8005598 <prvSwitchTimerLists+0xc0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe f92f 	bl	800375c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02e      	beq.n	8005572 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	429a      	cmp	r2, r3
 8005524:	d90e      	bls.n	8005544 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005532:	4b19      	ldr	r3, [pc, #100]	; (8005598 <prvSwitchTimerLists+0xc0>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3304      	adds	r3, #4
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f7fe f8d4 	bl	80036ea <vListInsert>
 8005542:	e016      	b.n	8005572 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005544:	2300      	movs	r3, #0
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	2300      	movs	r3, #0
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	2100      	movs	r1, #0
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fd60 	bl	8005014 <xTimerGenericCommand>
 8005554:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	603b      	str	r3, [r7, #0]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <prvSwitchTimerLists+0xc0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1b1      	bne.n	80054e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <prvSwitchTimerLists+0xc0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <prvSwitchTimerLists+0xc4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a04      	ldr	r2, [pc, #16]	; (8005598 <prvSwitchTimerLists+0xc0>)
 8005588:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800558a:	4a04      	ldr	r2, [pc, #16]	; (800559c <prvSwitchTimerLists+0xc4>)
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	6013      	str	r3, [r2, #0]
}
 8005590:	bf00      	nop
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20000da0 	.word	0x20000da0
 800559c:	20000da4 	.word	0x20000da4

080055a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055a6:	f000 f965 	bl	8005874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <prvCheckForValidListAndQueue+0x60>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d120      	bne.n	80055f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055b2:	4814      	ldr	r0, [pc, #80]	; (8005604 <prvCheckForValidListAndQueue+0x64>)
 80055b4:	f7fe f848 	bl	8003648 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055b8:	4813      	ldr	r0, [pc, #76]	; (8005608 <prvCheckForValidListAndQueue+0x68>)
 80055ba:	f7fe f845 	bl	8003648 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <prvCheckForValidListAndQueue+0x6c>)
 80055c0:	4a10      	ldr	r2, [pc, #64]	; (8005604 <prvCheckForValidListAndQueue+0x64>)
 80055c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <prvCheckForValidListAndQueue+0x70>)
 80055c6:	4a10      	ldr	r2, [pc, #64]	; (8005608 <prvCheckForValidListAndQueue+0x68>)
 80055c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80055ca:	2300      	movs	r3, #0
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	4b11      	ldr	r3, [pc, #68]	; (8005614 <prvCheckForValidListAndQueue+0x74>)
 80055d0:	4a11      	ldr	r2, [pc, #68]	; (8005618 <prvCheckForValidListAndQueue+0x78>)
 80055d2:	2110      	movs	r1, #16
 80055d4:	200a      	movs	r0, #10
 80055d6:	f7fe f953 	bl	8003880 <xQueueGenericCreateStatic>
 80055da:	4603      	mov	r3, r0
 80055dc:	4a08      	ldr	r2, [pc, #32]	; (8005600 <prvCheckForValidListAndQueue+0x60>)
 80055de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <prvCheckForValidListAndQueue+0x60>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <prvCheckForValidListAndQueue+0x60>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	490b      	ldr	r1, [pc, #44]	; (800561c <prvCheckForValidListAndQueue+0x7c>)
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe fd6c 	bl	80040cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055f4:	f000 f96e 	bl	80058d4 <vPortExitCritical>
}
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000da8 	.word	0x20000da8
 8005604:	20000d78 	.word	0x20000d78
 8005608:	20000d8c 	.word	0x20000d8c
 800560c:	20000da0 	.word	0x20000da0
 8005610:	20000da4 	.word	0x20000da4
 8005614:	20000e54 	.word	0x20000e54
 8005618:	20000db4 	.word	0x20000db4
 800561c:	08005f34 	.word	0x08005f34

08005620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3b04      	subs	r3, #4
 8005630:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3b04      	subs	r3, #4
 800563e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3b04      	subs	r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005650:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <pxPortInitialiseStack+0x64>)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3b14      	subs	r3, #20
 800565a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3b04      	subs	r3, #4
 8005666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f06f 0202 	mvn.w	r2, #2
 800566e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3b20      	subs	r3, #32
 8005674:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005676:	68fb      	ldr	r3, [r7, #12]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	08005689 	.word	0x08005689

08005688 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <prvTaskExitError+0x54>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800569a:	d00a      	beq.n	80056b2 <prvTaskExitError+0x2a>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	60fb      	str	r3, [r7, #12]
}
 80056ae:	bf00      	nop
 80056b0:	e7fe      	b.n	80056b0 <prvTaskExitError+0x28>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60bb      	str	r3, [r7, #8]
}
 80056c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056c6:	bf00      	nop
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0fc      	beq.n	80056c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	2000000c 	.word	0x2000000c

080056e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <pxCurrentTCBConst2>)
 80056e2:	6819      	ldr	r1, [r3, #0]
 80056e4:	6808      	ldr	r0, [r1, #0]
 80056e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ea:	f380 8809 	msr	PSP, r0
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f380 8811 	msr	BASEPRI, r0
 80056fa:	4770      	bx	lr
 80056fc:	f3af 8000 	nop.w

08005700 <pxCurrentTCBConst2>:
 8005700:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop

08005708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005708:	4808      	ldr	r0, [pc, #32]	; (800572c <prvPortStartFirstTask+0x24>)
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	6800      	ldr	r0, [r0, #0]
 800570e:	f380 8808 	msr	MSP, r0
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f380 8814 	msr	CONTROL, r0
 800571a:	b662      	cpsie	i
 800571c:	b661      	cpsie	f
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	df00      	svc	0
 8005728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800572a:	bf00      	nop
 800572c:	e000ed08 	.word	0xe000ed08

08005730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005736:	4b46      	ldr	r3, [pc, #280]	; (8005850 <xPortStartScheduler+0x120>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a46      	ldr	r2, [pc, #280]	; (8005854 <xPortStartScheduler+0x124>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10a      	bne.n	8005756 <xPortStartScheduler+0x26>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	613b      	str	r3, [r7, #16]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005756:	4b3e      	ldr	r3, [pc, #248]	; (8005850 <xPortStartScheduler+0x120>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3f      	ldr	r2, [pc, #252]	; (8005858 <xPortStartScheduler+0x128>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d10a      	bne.n	8005776 <xPortStartScheduler+0x46>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005776:	4b39      	ldr	r3, [pc, #228]	; (800585c <xPortStartScheduler+0x12c>)
 8005778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	22ff      	movs	r2, #255	; 0xff
 8005786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4b31      	ldr	r3, [pc, #196]	; (8005860 <xPortStartScheduler+0x130>)
 800579c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800579e:	4b31      	ldr	r3, [pc, #196]	; (8005864 <xPortStartScheduler+0x134>)
 80057a0:	2207      	movs	r2, #7
 80057a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057a4:	e009      	b.n	80057ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057a6:	4b2f      	ldr	r3, [pc, #188]	; (8005864 <xPortStartScheduler+0x134>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	4a2d      	ldr	r2, [pc, #180]	; (8005864 <xPortStartScheduler+0x134>)
 80057ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b80      	cmp	r3, #128	; 0x80
 80057c4:	d0ef      	beq.n	80057a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057c6:	4b27      	ldr	r3, [pc, #156]	; (8005864 <xPortStartScheduler+0x134>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f1c3 0307 	rsb	r3, r3, #7
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d00a      	beq.n	80057e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	60bb      	str	r3, [r7, #8]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057e8:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <xPortStartScheduler+0x134>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	4a1d      	ldr	r2, [pc, #116]	; (8005864 <xPortStartScheduler+0x134>)
 80057f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057f2:	4b1c      	ldr	r3, [pc, #112]	; (8005864 <xPortStartScheduler+0x134>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057fa:	4a1a      	ldr	r2, [pc, #104]	; (8005864 <xPortStartScheduler+0x134>)
 80057fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005806:	4b18      	ldr	r3, [pc, #96]	; (8005868 <xPortStartScheduler+0x138>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a17      	ldr	r2, [pc, #92]	; (8005868 <xPortStartScheduler+0x138>)
 800580c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <xPortStartScheduler+0x138>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a14      	ldr	r2, [pc, #80]	; (8005868 <xPortStartScheduler+0x138>)
 8005818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800581c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800581e:	f000 f8dd 	bl	80059dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <xPortStartScheduler+0x13c>)
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005828:	f000 f8fc 	bl	8005a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800582c:	4b10      	ldr	r3, [pc, #64]	; (8005870 <xPortStartScheduler+0x140>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <xPortStartScheduler+0x140>)
 8005832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005838:	f7ff ff66 	bl	8005708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800583c:	f7ff f856 	bl	80048ec <vTaskSwitchContext>
	prvTaskExitError();
 8005840:	f7ff ff22 	bl	8005688 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	e000ed00 	.word	0xe000ed00
 8005854:	410fc271 	.word	0x410fc271
 8005858:	410fc270 	.word	0x410fc270
 800585c:	e000e400 	.word	0xe000e400
 8005860:	20000ea4 	.word	0x20000ea4
 8005864:	20000ea8 	.word	0x20000ea8
 8005868:	e000ed20 	.word	0xe000ed20
 800586c:	2000000c 	.word	0x2000000c
 8005870:	e000ef34 	.word	0xe000ef34

08005874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	607b      	str	r3, [r7, #4]
}
 800588c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <vPortEnterCritical+0x58>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <vPortEnterCritical+0x58>)
 8005896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <vPortEnterCritical+0x58>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d10f      	bne.n	80058c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <vPortEnterCritical+0x5c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	603b      	str	r3, [r7, #0]
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <vPortEnterCritical+0x4a>
	}
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	2000000c 	.word	0x2000000c
 80058d0:	e000ed04 	.word	0xe000ed04

080058d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058da:	4b12      	ldr	r3, [pc, #72]	; (8005924 <vPortExitCritical+0x50>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <vPortExitCritical+0x24>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	607b      	str	r3, [r7, #4]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058f8:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <vPortExitCritical+0x50>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <vPortExitCritical+0x50>)
 8005900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <vPortExitCritical+0x50>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d105      	bne.n	8005916 <vPortExitCritical+0x42>
 800590a:	2300      	movs	r3, #0
 800590c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f383 8811 	msr	BASEPRI, r3
}
 8005914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	2000000c 	.word	0x2000000c
	...

08005930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005930:	f3ef 8009 	mrs	r0, PSP
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	4b15      	ldr	r3, [pc, #84]	; (8005990 <pxCurrentTCBConst>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	f01e 0f10 	tst.w	lr, #16
 8005940:	bf08      	it	eq
 8005942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594a:	6010      	str	r0, [r2, #0]
 800594c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005954:	f380 8811 	msr	BASEPRI, r0
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f7fe ffc4 	bl	80048ec <vTaskSwitchContext>
 8005964:	f04f 0000 	mov.w	r0, #0
 8005968:	f380 8811 	msr	BASEPRI, r0
 800596c:	bc09      	pop	{r0, r3}
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	6808      	ldr	r0, [r1, #0]
 8005972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005976:	f01e 0f10 	tst.w	lr, #16
 800597a:	bf08      	it	eq
 800597c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005980:	f380 8809 	msr	PSP, r0
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w

08005990 <pxCurrentTCBConst>:
 8005990:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop

08005998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	607b      	str	r3, [r7, #4]
}
 80059b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059b2:	f7fe fee1 	bl	8004778 <xTaskIncrementTick>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <xPortSysTickHandler+0x40>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	2300      	movs	r3, #0
 80059c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f383 8811 	msr	BASEPRI, r3
}
 80059ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <vPortSetupTimerInterrupt+0x34>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <vPortSetupTimerInterrupt+0x38>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <vPortSetupTimerInterrupt+0x3c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <vPortSetupTimerInterrupt+0x40>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <vPortSetupTimerInterrupt+0x44>)
 80059fa:	3b01      	subs	r3, #1
 80059fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059fe:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <vPortSetupTimerInterrupt+0x34>)
 8005a00:	2207      	movs	r2, #7
 8005a02:	601a      	str	r2, [r3, #0]
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	e000e010 	.word	0xe000e010
 8005a14:	e000e018 	.word	0xe000e018
 8005a18:	20000000 	.word	0x20000000
 8005a1c:	10624dd3 	.word	0x10624dd3
 8005a20:	e000e014 	.word	0xe000e014

08005a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a34 <vPortEnableVFP+0x10>
 8005a28:	6801      	ldr	r1, [r0, #0]
 8005a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a2e:	6001      	str	r1, [r0, #0]
 8005a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a32:	bf00      	nop
 8005a34:	e000ed88 	.word	0xe000ed88

08005a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a3e:	f3ef 8305 	mrs	r3, IPSR
 8005a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b0f      	cmp	r3, #15
 8005a48:	d914      	bls.n	8005a74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a4a:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <vPortValidateInterruptPriority+0x70>)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a54:	4b15      	ldr	r3, [pc, #84]	; (8005aac <vPortValidateInterruptPriority+0x74>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	7afa      	ldrb	r2, [r7, #11]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d20a      	bcs.n	8005a74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <vPortValidateInterruptPriority+0x78>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <vPortValidateInterruptPriority+0x7c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d90a      	bls.n	8005a9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	603b      	str	r3, [r7, #0]
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <vPortValidateInterruptPriority+0x60>
	}
 8005a9a:	bf00      	nop
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	e000e3f0 	.word	0xe000e3f0
 8005aac:	20000ea4 	.word	0x20000ea4
 8005ab0:	e000ed0c 	.word	0xe000ed0c
 8005ab4:	20000ea8 	.word	0x20000ea8

08005ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ac4:	f7fe fd9c 	bl	8004600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ac8:	4b5b      	ldr	r3, [pc, #364]	; (8005c38 <pvPortMalloc+0x180>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ad0:	f000 f920 	bl	8005d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ad4:	4b59      	ldr	r3, [pc, #356]	; (8005c3c <pvPortMalloc+0x184>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 8093 	bne.w	8005c08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01d      	beq.n	8005b24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ae8:	2208      	movs	r2, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d014      	beq.n	8005b24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f023 0307 	bic.w	r3, r3, #7
 8005b00:	3308      	adds	r3, #8
 8005b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <pvPortMalloc+0x6c>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	617b      	str	r3, [r7, #20]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d06e      	beq.n	8005c08 <pvPortMalloc+0x150>
 8005b2a:	4b45      	ldr	r3, [pc, #276]	; (8005c40 <pvPortMalloc+0x188>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d869      	bhi.n	8005c08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b34:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <pvPortMalloc+0x18c>)
 8005b36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b38:	4b42      	ldr	r3, [pc, #264]	; (8005c44 <pvPortMalloc+0x18c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b3e:	e004      	b.n	8005b4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d903      	bls.n	8005b5c <pvPortMalloc+0xa4>
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f1      	bne.n	8005b40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b5c:	4b36      	ldr	r3, [pc, #216]	; (8005c38 <pvPortMalloc+0x180>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d050      	beq.n	8005c08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	4413      	add	r3, r2
 8005b6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	1ad2      	subs	r2, r2, r3
 8005b80:	2308      	movs	r3, #8
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d91f      	bls.n	8005bc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <pvPortMalloc+0xf8>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	613b      	str	r3, [r7, #16]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	1ad2      	subs	r2, r2, r3
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bc2:	69b8      	ldr	r0, [r7, #24]
 8005bc4:	f000 f908 	bl	8005dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bc8:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <pvPortMalloc+0x188>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <pvPortMalloc+0x188>)
 8005bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <pvPortMalloc+0x188>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <pvPortMalloc+0x190>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d203      	bcs.n	8005bea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <pvPortMalloc+0x188>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <pvPortMalloc+0x190>)
 8005be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <pvPortMalloc+0x184>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <pvPortMalloc+0x194>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <pvPortMalloc+0x194>)
 8005c06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c08:	f7fe fd08 	bl	800461c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <pvPortMalloc+0x174>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60fb      	str	r3, [r7, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <pvPortMalloc+0x172>
	return pvReturn;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3728      	adds	r7, #40	; 0x28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20004ab4 	.word	0x20004ab4
 8005c3c:	20004ac8 	.word	0x20004ac8
 8005c40:	20004ab8 	.word	0x20004ab8
 8005c44:	20004aac 	.word	0x20004aac
 8005c48:	20004abc 	.word	0x20004abc
 8005c4c:	20004ac0 	.word	0x20004ac0

08005c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d04d      	beq.n	8005cfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c62:	2308      	movs	r3, #8
 8005c64:	425b      	negs	r3, r3
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4413      	add	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <vPortFree+0xb8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <vPortFree+0x44>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <vPortFree+0x62>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60bb      	str	r3, [r7, #8]
}
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <vPortFree+0xb8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01e      	beq.n	8005cfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11a      	bne.n	8005cfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <vPortFree+0xb8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cd8:	f7fe fc92 	bl	8004600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <vPortFree+0xbc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <vPortFree+0xbc>)
 8005ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cea:	6938      	ldr	r0, [r7, #16]
 8005cec:	f000 f874 	bl	8005dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005cf0:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <vPortFree+0xc0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	4a06      	ldr	r2, [pc, #24]	; (8005d10 <vPortFree+0xc0>)
 8005cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cfa:	f7fe fc8f 	bl	800461c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cfe:	bf00      	nop
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20004ac8 	.word	0x20004ac8
 8005d0c:	20004ab8 	.word	0x20004ab8
 8005d10:	20004ac4 	.word	0x20004ac4

08005d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d20:	4b27      	ldr	r3, [pc, #156]	; (8005dc0 <prvHeapInit+0xac>)
 8005d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3307      	adds	r3, #7
 8005d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	4a1f      	ldr	r2, [pc, #124]	; (8005dc0 <prvHeapInit+0xac>)
 8005d44:	4413      	add	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d4c:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <prvHeapInit+0xb0>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d52:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <prvHeapInit+0xb0>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d60:	2208      	movs	r2, #8
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0307 	bic.w	r3, r3, #7
 8005d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <prvHeapInit+0xb4>)
 8005d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <prvHeapInit+0xb4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <prvHeapInit+0xb4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <prvHeapInit+0xb4>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4a0a      	ldr	r2, [pc, #40]	; (8005dcc <prvHeapInit+0xb8>)
 8005da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <prvHeapInit+0xbc>)
 8005daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <prvHeapInit+0xc0>)
 8005dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005db2:	601a      	str	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	20000eac 	.word	0x20000eac
 8005dc4:	20004aac 	.word	0x20004aac
 8005dc8:	20004ab4 	.word	0x20004ab4
 8005dcc:	20004abc 	.word	0x20004abc
 8005dd0:	20004ab8 	.word	0x20004ab8
 8005dd4:	20004ac8 	.word	0x20004ac8

08005dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005de0:	4b28      	ldr	r3, [pc, #160]	; (8005e84 <prvInsertBlockIntoFreeList+0xac>)
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	e002      	b.n	8005dec <prvInsertBlockIntoFreeList+0x14>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d8f7      	bhi.n	8005de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4413      	add	r3, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d108      	bne.n	8005e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	441a      	add	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	441a      	add	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d118      	bne.n	8005e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <prvInsertBlockIntoFreeList+0xb0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d00d      	beq.n	8005e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	441a      	add	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	e008      	b.n	8005e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <prvInsertBlockIntoFreeList+0xb0>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e003      	b.n	8005e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d002      	beq.n	8005e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20004aac 	.word	0x20004aac
 8005e88:	20004ab4 	.word	0x20004ab4

08005e8c <__libc_init_array>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4d0d      	ldr	r5, [pc, #52]	; (8005ec4 <__libc_init_array+0x38>)
 8005e90:	4c0d      	ldr	r4, [pc, #52]	; (8005ec8 <__libc_init_array+0x3c>)
 8005e92:	1b64      	subs	r4, r4, r5
 8005e94:	10a4      	asrs	r4, r4, #2
 8005e96:	2600      	movs	r6, #0
 8005e98:	42a6      	cmp	r6, r4
 8005e9a:	d109      	bne.n	8005eb0 <__libc_init_array+0x24>
 8005e9c:	4d0b      	ldr	r5, [pc, #44]	; (8005ecc <__libc_init_array+0x40>)
 8005e9e:	4c0c      	ldr	r4, [pc, #48]	; (8005ed0 <__libc_init_array+0x44>)
 8005ea0:	f000 f82e 	bl	8005f00 <_init>
 8005ea4:	1b64      	subs	r4, r4, r5
 8005ea6:	10a4      	asrs	r4, r4, #2
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	42a6      	cmp	r6, r4
 8005eac:	d105      	bne.n	8005eba <__libc_init_array+0x2e>
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb4:	4798      	blx	r3
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7ee      	b.n	8005e98 <__libc_init_array+0xc>
 8005eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebe:	4798      	blx	r3
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	e7f2      	b.n	8005eaa <__libc_init_array+0x1e>
 8005ec4:	08005f88 	.word	0x08005f88
 8005ec8:	08005f88 	.word	0x08005f88
 8005ecc:	08005f88 	.word	0x08005f88
 8005ed0:	08005f8c 	.word	0x08005f8c

08005ed4 <memcpy>:
 8005ed4:	440a      	add	r2, r1
 8005ed6:	4291      	cmp	r1, r2
 8005ed8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005edc:	d100      	bne.n	8005ee0 <memcpy+0xc>
 8005ede:	4770      	bx	lr
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eea:	4291      	cmp	r1, r2
 8005eec:	d1f9      	bne.n	8005ee2 <memcpy+0xe>
 8005eee:	bd10      	pop	{r4, pc}

08005ef0 <memset>:
 8005ef0:	4402      	add	r2, r0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <_init>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr

08005f0c <_fini>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr
